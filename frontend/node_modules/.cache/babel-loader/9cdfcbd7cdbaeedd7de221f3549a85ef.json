{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rober\\\\Documents\\\\Schoolwork\\\\Computer Science\\\\NEA\\\\FinalNEA\\\\frontend\\\\src\\\\Pages\\\\VerifyPasswordReset.js\",\n    _s = $RefreshSig$();\n\nimport { useParams, useSearchParams } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function VerifyPasswordReset() {\n  _s();\n\n  const {\n    username\n  } = useParams();\n  const [searchParams] = useSearchParams();\n  const [pageLoaded, setPageLoaded] = useState(\"loading\");\n  const [inputType, setInputType] = useState(\"password\");\n  let uuid = searchParams.get(\"uuid\");\n\n  if (uuid != null) {\n    //Get uuid from database.\n    fetch(\"http://localhost:8000/api/v1/uuid/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        \"username\": username\n      })\n    }).then(data => data.json()).then(res => {\n      console.log(res);\n      console.dir(username);\n\n      if (res[\"type\"] == \"success\") {\n        //Use UUID here.\n        if (uuid == res[\"uuid\"]) {\n          //The uuid is the same so is valid.\n          setPageLoaded(\"valid\");\n        } else {\n          setPageLoaded(\"invalid\");\n        }\n      } else {\n        setPageLoaded(\"invalid\");\n      }\n    });\n  } else {\n    setPageLoaded(\"invalid\");\n  }\n\n  const ToggleInputType = function () {\n    setInputType(inputType ? false : true);\n  };\n\n  if (pageLoaded == \"loading\") {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"pageLoaded\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: pageLoaded == \"valid\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Confirm password reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"New password:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: inputType,\n          onChange: () => {}\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Re-enter password:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: inputType,\n          onChange: () => {}\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: ToggleInputType,\n          children: \"View Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"INVALID\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(VerifyPasswordReset, \"vW/JWTHvdAZiEBoBefukMNAAAyE=\", false, function () {\n  return [useParams, useSearchParams];\n});\n\n_c = VerifyPasswordReset;\n\nvar _c;\n\n$RefreshReg$(_c, \"VerifyPasswordReset\");","map":{"version":3,"sources":["C:/Users/rober/Documents/Schoolwork/Computer Science/NEA/FinalNEA/frontend/src/Pages/VerifyPasswordReset.js"],"names":["useParams","useSearchParams","useEffect","useState","VerifyPasswordReset","username","searchParams","pageLoaded","setPageLoaded","inputType","setInputType","uuid","get","fetch","method","headers","body","JSON","stringify","then","data","json","res","console","log","dir","ToggleInputType"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,eAApB,QAA2C,kBAA3C;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;;AACA,eAAe,SAASC,mBAAT,GAA8B;AAAA;;AACzC,QAAM;AAACC,IAAAA;AAAD,MAAaL,SAAS,EAA5B;AACA,QAAM,CAACM,YAAD,IAAiBL,eAAe,EAAtC;AACA,QAAK,CAACM,UAAD,EAAaC,aAAb,IAA8BL,QAAQ,CAAC,SAAD,CAA3C;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,UAAD,CAA1C;AAII,MAAIQ,IAAI,GAAGL,YAAY,CAACM,GAAb,CAAiB,MAAjB,CAAX;;AACJ,MAAGD,IAAI,IAAI,IAAX,EAAgB;AACZ;AACAE,IAAAA,KAAK,CAAC,oCAAD,EAAsC;AACvCC,MAAAA,MAAM,EAAC,MADgC;AAEvCC,MAAAA,OAAO,EAAC;AACJ,wBAAe;AADX,OAF+B;AAKvCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAC,oBAAWb;AAAZ,OAAf;AALiC,KAAtC,CAAL,CAMGc,IANH,CAMSC,IAAD,IAAQA,IAAI,CAACC,IAAL,EANhB,EAOCF,IAPD,CAOOG,GAAD,IAAO;AACTC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAC,MAAAA,OAAO,CAACE,GAAR,CAAYpB,QAAZ;;AACA,UAAGiB,GAAG,CAAC,MAAD,CAAH,IAAe,SAAlB,EAA4B;AAAC;AAEzB,YAAGX,IAAI,IAAIW,GAAG,CAAC,MAAD,CAAd,EAAuB;AAAC;AACpBd,UAAAA,aAAa,CAAC,OAAD,CAAb;AACH,SAFD,MAGI;AACAA,UAAAA,aAAa,CAAC,SAAD,CAAb;AACH;AACJ,OARD,MASI;AACAA,QAAAA,aAAa,CAAC,SAAD,CAAb;AACH;AACJ,KAtBD;AAuBH,GAzBD,MA0BI;AACAA,IAAAA,aAAa,CAAC,SAAD,CAAb;AACH;;AAIL,QAAMkB,eAAe,GAAG,YAAW;AAC/BhB,IAAAA,YAAY,CAACD,SAAS,GAAE,KAAF,GAAQ,IAAlB,CAAZ;AACH,GAFD;;AAII,MAAGF,UAAU,IAAI,SAAjB,EAA2B;AACvB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AACD,sBACA;AAAA,cACCA,UAAU,IAAI,OAAd,gBACD;AAAA,8BACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,eAEA;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAO,UAAA,IAAI,EAAEE,SAAb;AAAwB,UAAA,QAAQ,EAAE,MAAM,CAAE;AAA1C;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAII;AAAO,UAAA,IAAI,EAAEA,SAAb;AAAwB,UAAA,QAAQ,EAAE,MAAM,CAAE;AAA1C;AAAA;AAAA;AAAA;AAAA,gBAJJ,eAKI;AAAO,UAAA,IAAI,EAAC;AAAZ;AAAA;AAAA;AAAA;AAAA,gBALJ,eAMI;AAAQ,UAAA,OAAO,EAAEiB,eAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFA;AAAA,oBADC,gBAYC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAbF,mBADA;AAmBH;;GAnEuBtB,mB;UACDJ,S,EACIC,e;;;KAFHG,mB","sourcesContent":["import { useParams, useSearchParams } from \"react-router-dom\";\r\nimport { useEffect, useState } from \"react\";\r\nexport default function VerifyPasswordReset(){\r\n    const {username} = useParams();\r\n    const [searchParams] = useSearchParams();\r\n    const[pageLoaded, setPageLoaded] = useState(\"loading\");\r\n    const [inputType, setInputType] = useState(\"password\");\r\n\r\n    \r\n    \r\n        let uuid = searchParams.get(\"uuid\");\r\n    if(uuid != null){\r\n        //Get uuid from database.\r\n        fetch(\"http://localhost:8000/api/v1/uuid/\",{\r\n            method:\"POST\",\r\n            headers:{\r\n                \"Content-Type\":\"application/json\",\r\n            },\r\n            body: JSON.stringify({\"username\":username})\r\n        }).then((data)=>data.json())\r\n        .then((res)=>{\r\n            console.log(res);\r\n            console.dir(username);\r\n            if(res[\"type\"] == \"success\"){//Use UUID here.\r\n                \r\n                if(uuid == res[\"uuid\"]){//The uuid is the same so is valid.\r\n                    setPageLoaded(\"valid\")\r\n                }\r\n                else{\r\n                    setPageLoaded(\"invalid\");\r\n                }\r\n            }\r\n            else{\r\n                setPageLoaded(\"invalid\");\r\n            }\r\n        });\r\n    }\r\n    else{\r\n        setPageLoaded(\"invalid\");\r\n    }\r\n\r\n    \r\n\r\nconst ToggleInputType = function() {\r\n    setInputType(inputType? false:true);\r\n}\r\n\r\n    if(pageLoaded == \"loading\"){\r\n        return <h1>pageLoaded</h1>;\r\n    }\r\n    return(\r\n    <>\r\n    {pageLoaded == \"valid\"?\r\n    <>\r\n    <h1>Confirm password reset</h1>\r\n    <form>\r\n        <label>New password:</label>\r\n        <input type={inputType} onChange={() => {}}/>\r\n        <label>Re-enter password:</label>\r\n        <input type={inputType} onChange={() => {}}/>\r\n        <input type=\"submit\"/>\r\n        <button onClick={ToggleInputType}>View Password</button>\r\n    </form> \r\n    </>\r\n    : <h1>INVALID</h1>\r\n}\r\n    \r\n    </>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}