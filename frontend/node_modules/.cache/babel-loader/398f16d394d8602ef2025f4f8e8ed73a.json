{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rober\\\\Documents\\\\Schoolwork\\\\Computer Science\\\\NEA\\\\FinalNEA\\\\frontend\\\\src\\\\Pages\\\\VerifyPasswordReset.js\",\n    _s = $RefreshSig$();\n\nimport { useParams, useSearchParams } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function VerifyPasswordReset() {\n  _s();\n\n  const username = useParams();\n  const [searchParams] = useSearchParams();\n  const [pageLoaded, setPageLoaded] = useState(\"loading\");\n  let uuid = searchParams.get(\"uuid\");\n  useEffect(() => {\n    if (uuid != null) {\n      //Get uuid from database.\n      fetch(\"http://localhost:8000/api/v1/uuid/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          \"username\": username\n        })\n      }).then(data => data.json()).then(res => {\n        if (res[\"type\"] == \"success\") {\n          //Use UUID here.\n          console.log(res);\n\n          if (uuid == res[\"uuid\"]) {\n            //The uuid is the same so is valid.\n            setPageLoaded(\"valid\");\n          } else {\n            setPageLoaded(\"invalid\");\n          }\n        } else {\n          setPageLoaded(\"invalid\");\n        }\n      });\n    }\n  });\n\n  if (pageLoaded == \"loading\") {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"pageLoaded\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: pageLoaded == \"valid\" ? /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Confirm password reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"INVALID\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 39\n    }, this)\n  }, void 0, false);\n}\n\n_s(VerifyPasswordReset, \"d6n4tRKPnJeQLvhVzA9oxjw9btI=\", false, function () {\n  return [useParams, useSearchParams];\n});\n\n_c = VerifyPasswordReset;\n\nvar _c;\n\n$RefreshReg$(_c, \"VerifyPasswordReset\");","map":{"version":3,"sources":["C:/Users/rober/Documents/Schoolwork/Computer Science/NEA/FinalNEA/frontend/src/Pages/VerifyPasswordReset.js"],"names":["useParams","useSearchParams","useEffect","useState","VerifyPasswordReset","username","searchParams","pageLoaded","setPageLoaded","uuid","get","fetch","method","headers","body","JSON","stringify","then","data","json","res","console","log"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,eAApB,QAA2C,kBAA3C;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;;AACA,eAAe,SAASC,mBAAT,GAA8B;AAAA;;AACzC,QAAMC,QAAQ,GAAGL,SAAS,EAA1B;AACA,QAAM,CAACM,YAAD,IAAiBL,eAAe,EAAtC;AACA,QAAK,CAACM,UAAD,EAAaC,aAAb,IAA8BL,QAAQ,CAAC,SAAD,CAA3C;AAGA,MAAIM,IAAI,GAAGH,YAAY,CAACI,GAAb,CAAiB,MAAjB,CAAX;AACAR,EAAAA,SAAS,CAAC,MAAI;AACd,QAAGO,IAAI,IAAI,IAAX,EAAgB;AACZ;AACAE,MAAAA,KAAK,CAAC,oCAAD,EAAsC;AACvCC,QAAAA,MAAM,EAAC,MADgC;AAEvCC,QAAAA,OAAO,EAAC;AACJ,0BAAe;AADX,SAF+B;AAKvCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAC,sBAAWX;AAAZ,SAAf;AALiC,OAAtC,CAAL,CAMGY,IANH,CAMSC,IAAD,IAAQA,IAAI,CAACC,IAAL,EANhB,EAOCF,IAPD,CAOOG,GAAD,IAAO;AACT,YAAGA,GAAG,CAAC,MAAD,CAAH,IAAe,SAAlB,EAA4B;AAAC;AACzBC,UAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;;AACA,cAAGX,IAAI,IAAIW,GAAG,CAAC,MAAD,CAAd,EAAuB;AAAC;AACpBZ,YAAAA,aAAa,CAAC,OAAD,CAAb;AACH,WAFD,MAGI;AACAA,YAAAA,aAAa,CAAC,SAAD,CAAb;AACH;AACJ,SARD,MASI;AACAA,UAAAA,aAAa,CAAC,SAAD,CAAb;AACH;AACJ,OApBD;AAqBH;AACJ,GAzBY,CAAT;;AA2BA,MAAGD,UAAU,IAAI,SAAjB,EAA2B;AACvB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AACD,sBACA;AAAA,cACCA,UAAU,IAAI,OAAd,gBACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADC,gBACiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFlC,mBADA;AAQH;;GA7CuBH,mB;UACHJ,S,EACMC,e;;;KAFHG,mB","sourcesContent":["import { useParams, useSearchParams } from \"react-router-dom\";\r\nimport { useEffect, useState } from \"react\";\r\nexport default function VerifyPasswordReset(){\r\n    const username = useParams();\r\n    const [searchParams] = useSearchParams();\r\n    const[pageLoaded, setPageLoaded] = useState(\"loading\");\r\n\r\n\r\n    let uuid = searchParams.get(\"uuid\");\r\n    useEffect(()=>{\r\n    if(uuid != null){\r\n        //Get uuid from database.\r\n        fetch(\"http://localhost:8000/api/v1/uuid/\",{\r\n            method:\"POST\",\r\n            headers:{\r\n                \"Content-Type\":\"application/json\",\r\n            },\r\n            body: JSON.stringify({\"username\":username})\r\n        }).then((data)=>data.json())\r\n        .then((res)=>{\r\n            if(res[\"type\"] == \"success\"){//Use UUID here.\r\n                console.log(res);\r\n                if(uuid == res[\"uuid\"]){//The uuid is the same so is valid.\r\n                    setPageLoaded(\"valid\")\r\n                }\r\n                else{\r\n                    setPageLoaded(\"invalid\");\r\n                }\r\n            }\r\n            else{\r\n                setPageLoaded(\"invalid\");\r\n            }\r\n        });\r\n    }\r\n}\r\n    );\r\n    if(pageLoaded == \"loading\"){\r\n        return <h1>pageLoaded</h1>;\r\n    }\r\n    return(\r\n    <>\r\n    {pageLoaded == \"valid\"?\r\n    <h1>Confirm password reset</h1> : <h1>INVALID</h1>\r\n}\r\n    \r\n    </>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}