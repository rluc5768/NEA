{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rober\\\\Documents\\\\Schoolwork\\\\Computer Science\\\\NEA\\\\FinalNEA\\\\frontend\\\\src\\\\Pages\\\\VerifyPasswordReset.js\",\n    _s = $RefreshSig$();\n\nimport { useNavigate, useParams, useSearchParams } from \"react-router-dom\";\nimport { useEffect, useRef, useState } from \"react\";\nimport ValidateInputs from \"../External/InputValidationClass\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function VerifyPasswordReset(props) {\n  _s();\n\n  const {\n    username\n  } = useParams();\n  const [searchParams] = useSearchParams();\n  const [pageLoaded, setPageLoaded] = useState(\"loading\");\n  const [inputType, setInputType] = useState(\"password\");\n  const validUUID = useRef(\"\");\n  const password1 = useRef();\n  const password2 = useRef();\n  const navigate = useNavigate();\n  useEffect(() => {\n    let uuid = searchParams.get(\"uuid\");\n\n    if (uuid != null) {\n      //Get uuid from database.\n      fetch(\"http://localhost:8000/api/v1/uuid/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          \"username\": username\n        })\n      }).then(data => data.json()).then(res => {\n        console.log(res);\n        console.dir(username);\n\n        if (res[\"type\"] == \"success\") {\n          //Use UUID here.\n          if (uuid == res[\"uuid\"]) {\n            //The uuid is the same so is valid.\n            validUUID.current = uuid;\n            setPageLoaded(\"valid\");\n          } else {\n            setPageLoaded(\"invalid\");\n          }\n        } else {\n          setPageLoaded(\"invalid\");\n        }\n      });\n    } else {\n      setPageLoaded(\"invalid\");\n    }\n  }, []);\n\n  const ToggleInputType = function () {\n    if (inputType == \"password\") {\n      setInputType(\"text\");\n    } else {\n      setInputType(\"password\");\n    }\n  };\n\n  const HandleSubmit = function (e) {\n    e.preventDefault();\n\n    if (password1.current == password2.current) {\n      //Passwords match so exchange UUID for JWT and update database.\n      if (ValidateInputs.validatePassword(password1.current) && ValidateInputs.validatePassword(password2.current)) {\n        //Passwords are both valid. (validate on backend as well).\n        if (validUUID.current != \"\") {\n          fetch(\"http://localhost:8000/api/v1/exchangeUUID/\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n              \"username\": username,\n              \"uuid\": validUUID.current\n            })\n          }).then(data => data.json()).then(res => {\n            console.log(res);\n\n            if (res[\"type\"] == \"auth_token\") {\n              console.log(\"auth_token\" + res[\"auth_token\"]);\n              sessionStorage.setItem(\"token\", JSON.stringify(res[\"token\"]));\n              props.LogUserInOrOut(true);\n              fetch(\"http://localhost:8000/api/v1/user/\", {\n                method: \"PUT\",\n                headers: {\n                  \"Content-Type\": \"application/json\",\n                  \"Authorization\": \"Bearer \".concat(res[\"auth_token\"])\n                },\n                body: JSON.stringify({\n                  \"password\": password1.current\n                })\n              }).then(data => data.json()).then(response => {\n                navigate(\"/home\");\n              });\n            } else {\n              setPageLoaded(\"invalid\");\n            }\n          });\n        }\n      } else {\n        alert(\"Passwords must match.\");\n      }\n    }\n  };\n\n  if (pageLoaded == \"loading\") {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"pageLoaded\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: pageLoaded == \"valid\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Confirm password reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"New password:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: inputType,\n          onChange: e => {\n            password1.current = e.target.value;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Re-enter password:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: inputType,\n          onChange: e => {\n            password2.current = e.target.value;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          onClick: e => {\n            HandleSubmit(e);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: ToggleInputType,\n          children: \"View Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"An error has occured, try again.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(VerifyPasswordReset, \"vJGgQg+5lrrpKQBRst/tHxgN1rU=\", false, function () {\n  return [useParams, useSearchParams, useNavigate];\n});\n\n_c = VerifyPasswordReset;\n\nvar _c;\n\n$RefreshReg$(_c, \"VerifyPasswordReset\");","map":{"version":3,"sources":["C:/Users/rober/Documents/Schoolwork/Computer Science/NEA/FinalNEA/frontend/src/Pages/VerifyPasswordReset.js"],"names":["useNavigate","useParams","useSearchParams","useEffect","useRef","useState","ValidateInputs","VerifyPasswordReset","props","username","searchParams","pageLoaded","setPageLoaded","inputType","setInputType","validUUID","password1","password2","navigate","uuid","get","fetch","method","headers","body","JSON","stringify","then","data","json","res","console","log","dir","current","ToggleInputType","HandleSubmit","e","preventDefault","validatePassword","sessionStorage","setItem","LogUserInOrOut","concat","response","alert","target","value"],"mappings":"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","sourcesContent":["import { useNavigate, useParams, useSearchParams } from \"react-router-dom\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport ValidateInputs from \"../External/InputValidationClass\";\r\nexport default function VerifyPasswordReset(props){\r\n    const {username} = useParams();\r\n    const [searchParams] = useSearchParams();\r\n    const[pageLoaded, setPageLoaded] = useState(\"loading\");\r\n    const [inputType, setInputType] = useState(\"password\");\r\n    const validUUID = useRef(\"\");\r\n    const password1 = useRef();\r\n    const password2 = useRef();\r\n    const navigate = useNavigate();\r\n    \r\n    useEffect(()=>{\r\n        let uuid = searchParams.get(\"uuid\");\r\n    if(uuid != null){\r\n        //Get uuid from database.\r\n        fetch(\"http://localhost:8000/api/v1/uuid/\",{\r\n            method:\"POST\",\r\n            headers:{\r\n                \"Content-Type\":\"application/json\",\r\n            },\r\n            body: JSON.stringify({\"username\":username})\r\n        }).then((data)=>data.json())\r\n        .then((res)=>{\r\n            console.log(res);\r\n            console.dir(username);\r\n            if(res[\"type\"] == \"success\"){//Use UUID here.\r\n                \r\n                if(uuid == res[\"uuid\"]){//The uuid is the same so is valid.\r\n                    validUUID.current = uuid;\r\n                    setPageLoaded(\"valid\")\r\n                }\r\n                else{\r\n                    setPageLoaded(\"invalid\");\r\n                }\r\n            }\r\n            else{\r\n                setPageLoaded(\"invalid\");\r\n            }\r\n        });\r\n    }\r\n    else{\r\n        setPageLoaded(\"invalid\");\r\n    }\r\n\r\n},[]);\r\n\r\nconst ToggleInputType = function() {\r\n    if(inputType == \"password\"){\r\n        setInputType(\"text\");\r\n    }\r\n    else{\r\n        setInputType(\"password\");\r\n    }\r\n}\r\n    const HandleSubmit = function(e){\r\n        e.preventDefault();\r\n        if(password1.current == password2.current){//Passwords match so exchange UUID for JWT and update database.\r\n            if(ValidateInputs.validatePassword(password1.current) && ValidateInputs.validatePassword(password2.current)){//Passwords are both valid. (validate on backend as well).\r\n\r\n            if(validUUID.current != \"\"){\r\n            fetch(\"http://localhost:8000/api/v1/exchangeUUID/\",{\r\n                method:\"POST\",\r\n                headers:{\r\n                    \"Content-Type\":\"application/json\",\r\n                },\r\n                body:JSON.stringify({\r\n                    \"username\":username, \r\n                    \"uuid\":validUUID.current\r\n                })\r\n            }).then(data => data.json())\r\n            .then((res) => {\r\n                console.log(res);\r\n                if (res[\"type\"] == \"auth_token\"){\r\n                    console.log(\"auth_token\"+res[\"auth_token\"]);\r\n                    sessionStorage.setItem(\"token\", JSON.stringify(res[\"token\"]));\r\n                    props.LogUserInOrOut(true);\r\n                    fetch(\"http://localhost:8000/api/v1/user/\",{\r\n                        method:\"PUT\",\r\n                        headers:{\r\n                            \"Content-Type\":\"application/json\",\r\n                            \"Authorization\":\"Bearer \".concat(res[\"auth_token\"])\r\n                        },\r\n                        body:JSON.stringify({\r\n                            \"password\":password1.current,\r\n                        })\r\n                    })\r\n                    .then(data=>data.json())\r\n                    .then(response => {\r\n                        navigate(\"/home\");\r\n                    })\r\n                }\r\n                else{\r\n                    setPageLoaded(\"invalid\")\r\n                }\r\n            });\r\n            \r\n        }\r\n    }\r\n        \r\n        else{\r\n            alert(\"Passwords must match.\")\r\n        }\r\n    }\r\n}\r\n    if(pageLoaded == \"loading\"){\r\n        return <h1>pageLoaded</h1>;\r\n    }\r\n    return(\r\n    <>\r\n    {pageLoaded == \"valid\"?\r\n    <>\r\n    <h1>Confirm password reset</h1>\r\n    <form>\r\n        <label>New password:</label>\r\n        <input type={inputType} onChange={(e) => {\r\n            password1.current = e.target.value;\r\n        }}/>\r\n        <label>Re-enter password:</label>\r\n        <input type={inputType} onChange={(e) => {\r\n            password2.current = e.target.value;\r\n        }}/>\r\n        <input type=\"submit\" onClick={(e) => {\r\n            HandleSubmit(e);\r\n        }}/>\r\n        <button type=\"button\" onClick={ToggleInputType}>View Password</button>\r\n    </form> \r\n    </>\r\n    : <h1>An error has occured, try again.</h1>\r\n}\r\n    \r\n    </>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}