{"ast":null,"code":"import { useState } from \"react\";\nconst Authentication = {\n  //User : function (){//This is where the token will be validated\n  //const [token, setToken] = useToken();\n  //let token= \"dsfdsfsdf\";\n  //=============== Initial Validation ===================\n  //=============== End of intial validation =============\n  //return true; //true if valid, false if invalid.\n  User: function (currentToken, setPageState) {\n    console.log(\"c_token: \" + currentToken);\n\n    if (currentToken == null) {\n      setPageState(\"invalid\");\n    }\n\n    validateJWT({\n      \"token\": currentToken\n    }).then(data => data.json()).then(valid => {\n      console.log(valid);\n      setPageState(valid ? \"valid\" : \"invalid\");\n    });\n    /*\r\n    (async function () {\r\n      let auth = (await validateJWT(currentToken)).bodyUsed;\r\n      console.dir(\"asdsa\" + auth);\r\n      setPageState(auth ? \"valid\" : \"invalid\");\r\n    })(); //auto-executing function*/\n  }\n};\nexport default Authentication;\n\nasync function validateJWT(token) {\n  return fetch(\"http://localhost:8000/api/v1/authorise_user/\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(token)\n  });\n}","map":{"version":3,"sources":["C:/Users/rober/Documents/Schoolwork/Computer Science/NEA/FinalNEA/frontend/src/Services/Authentication.js"],"names":["useState","Authentication","User","currentToken","setPageState","console","log","validateJWT","then","data","json","valid","token","fetch","method","headers","body","JSON","stringify"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,MAAMC,cAAc,GAAG;AACrB;AACA;AACA;AACA;AAEA;AAEA;AACAC,EAAAA,IAAI,EAAE,UAAUC,YAAV,EAAwBC,YAAxB,EAAsC;AAC1CC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAcH,YAA1B;;AACA,QAAIA,YAAY,IAAI,IAApB,EAA0B;AACxBC,MAAAA,YAAY,CAAC,SAAD,CAAZ;AACD;;AACDG,IAAAA,WAAW,CAAC;AAAC,eAAQJ;AAAT,KAAD,CAAX,CACGK,IADH,CACSC,IAAD,IAAUA,IAAI,CAACC,IAAL,EADlB,EAEGF,IAFH,CAESG,KAAD,IAAW;AACfN,MAAAA,OAAO,CAACC,GAAR,CAAYK,KAAZ;AACAP,MAAAA,YAAY,CAACO,KAAK,GAAG,OAAH,GAAa,SAAnB,CAAZ;AACD,KALH;AAMA;AACJ;AACA;AACA;AACA;AACA;AACG;AA1BoB,CAAvB;AA6BA,eAAeV,cAAf;;AAEA,eAAeM,WAAf,CAA2BK,KAA3B,EAAkC;AAChC,SAAOC,KAAK,CAAC,8CAAD,EAAiD;AAC3DC,IAAAA,MAAM,EAAE,MADmD;AAE3DC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAFkD;AAK3DC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,KAAf;AALqD,GAAjD,CAAZ;AAOD","sourcesContent":["import { useState } from \"react\";\r\nconst Authentication = {\r\n  //User : function (){//This is where the token will be validated\r\n  //const [token, setToken] = useToken();\r\n  //let token= \"dsfdsfsdf\";\r\n  //=============== Initial Validation ===================\r\n\r\n  //=============== End of intial validation =============\r\n\r\n  //return true; //true if valid, false if invalid.\r\n  User: function (currentToken, setPageState) {\r\n    console.log(\"c_token: \" + currentToken);\r\n    if (currentToken == null) {\r\n      setPageState(\"invalid\");\r\n    }\r\n    validateJWT({\"token\":currentToken})\r\n      .then((data) => data.json())\r\n      .then((valid) => {\r\n        console.log(valid);\r\n        setPageState(valid ? \"valid\" : \"invalid\");\r\n      });\r\n    /*\r\n    (async function () {\r\n      let auth = (await validateJWT(currentToken)).bodyUsed;\r\n      console.dir(\"asdsa\" + auth);\r\n      setPageState(auth ? \"valid\" : \"invalid\");\r\n    })(); //auto-executing function*/\r\n  },\r\n};\r\n\r\nexport default Authentication;\r\n\r\nasync function validateJWT(token) {\r\n  return fetch(\"http://localhost:8000/api/v1/authorise_user/\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(token),\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}