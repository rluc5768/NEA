{"ast":null,"code":"/**\r\n * React Router v6.2.1\r\n *\r\n * Copyright (c) Remix Software Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE.md file in the root directory of this source tree.\r\n *\r\n * @license MIT\r\n */\nimport { createContext, useRef, useState, useLayoutEffect, createElement, useContext, useEffect, useMemo, useCallback, Children, isValidElement, Fragment } from 'react';\nimport { createMemoryHistory, Action, parsePath } from 'history';\n\nfunction invariant(cond, message) {\n  if (!cond) throw new Error(message);\n}\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nconst alreadyWarned = {};\n\nfunction warningOnce(key, cond, message) {\n  if (!cond && !alreadyWarned[key]) {\n    alreadyWarned[key] = true;\n    process.env.NODE_ENV !== \"production\" ? warning(false, message) : void 0;\n  }\n} ///////////////////////////////////////////////////////////////////////////////\n// CONTEXT\n///////////////////////////////////////////////////////////////////////////////\n\n/**\r\n * A Navigator is a \"location changer\"; it's how you get to different locations.\r\n *\r\n * Every history instance conforms to the Navigator interface, but the\r\n * distinction is useful primarily when it comes to the low-level <Router> API\r\n * where both the location and a navigator must be provided separately in order\r\n * to avoid \"tearing\" that may occur in a suspense-enabled app if the action\r\n * and/or location were to be read directly from the history instance.\r\n */\n\n\nconst NavigationContext = /*#__PURE__*/createContext(null);\n\nif (process.env.NODE_ENV !== \"production\") {\n  NavigationContext.displayName = \"Navigation\";\n}\n\nconst LocationContext = /*#__PURE__*/createContext(null);\n\nif (process.env.NODE_ENV !== \"production\") {\n  LocationContext.displayName = \"Location\";\n}\n\nconst RouteContext = /*#__PURE__*/createContext({\n  outlet: null,\n  matches: []\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  RouteContext.displayName = \"Route\";\n} ///////////////////////////////////////////////////////////////////////////////\n// COMPONENTS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\r\n * A <Router> that stores all entries in memory.\r\n *\r\n * @see https://reactrouter.com/docs/en/v6/api#memoryrouter\r\n */\n\n\nfunction MemoryRouter(_ref) {\n  let {\n    basename,\n    children,\n    initialEntries,\n    initialIndex\n  } = _ref;\n  let historyRef = useRef();\n\n  if (historyRef.current == null) {\n    historyRef.current = createMemoryHistory({\n      initialEntries,\n      initialIndex\n    });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = useState({\n    action: history.action,\n    location: history.location\n  });\n  useLayoutEffect(() => history.listen(setState), [history]);\n  return /*#__PURE__*/createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history\n  });\n}\n/**\r\n * Changes the current location.\r\n *\r\n * Note: This API is mostly useful in React.Component subclasses that are not\r\n * able to use hooks. In functional components, we recommend you use the\r\n * `useNavigate` hook instead.\r\n *\r\n * @see https://reactrouter.com/docs/en/v6/api#navigate\r\n */\n\n\nfunction Navigate(_ref2) {\n  let {\n    to,\n    replace,\n    state\n  } = _ref2;\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of\n  // the router loaded. We can help them understand how to avoid that.\n  \"<Navigate> may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  process.env.NODE_ENV !== \"production\" ? warning(!useContext(NavigationContext).static, \"<Navigate> must not be used on the initial render in a <StaticRouter>. \" + \"This is a no-op, but you should modify your code so the <Navigate> is \" + \"only ever rendered in response to some user interaction or state change.\") : void 0;\n  let navigate = useNavigate();\n  useEffect(() => {\n    navigate(to, {\n      replace,\n      state\n    });\n  });\n  return null;\n}\n/**\r\n * Renders the child route's element, if there is one.\r\n *\r\n * @see https://reactrouter.com/docs/en/v6/api#outlet\r\n */\n\n\nfunction Outlet(props) {\n  return useOutlet(props.context);\n}\n/**\r\n * Declares an element that should be rendered at a certain URL path.\r\n *\r\n * @see https://reactrouter.com/docs/en/v6/api#route\r\n */\n\n\nfunction Route(_props) {\n  process.env.NODE_ENV !== \"production\" ? invariant(false, \"A <Route> is only ever to be used as the child of <Routes> element, \" + \"never rendered directly. Please wrap your <Route> in a <Routes>.\") : invariant(false);\n}\n/**\r\n * Provides location context for the rest of the app.\r\n *\r\n * Note: You usually won't render a <Router> directly. Instead, you'll render a\r\n * router that is more specific to your environment such as a <BrowserRouter>\r\n * in web browsers or a <StaticRouter> for server rendering.\r\n *\r\n * @see https://reactrouter.com/docs/en/v6/api#router\r\n */\n\n\nfunction Router(_ref3) {\n  let {\n    basename: basenameProp = \"/\",\n    children = null,\n    location: locationProp,\n    navigationType = Action.Pop,\n    navigator,\n    static: staticProp = false\n  } = _ref3;\n  !!useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"You cannot render a <Router> inside another <Router>.\" + \" You should never have more than one in your app.\") : invariant(false) : void 0;\n  let basename = normalizePathname(basenameProp);\n  let navigationContext = useMemo(() => ({\n    basename,\n    navigator,\n    static: staticProp\n  }), [basename, navigator, staticProp]);\n\n  if (typeof locationProp === \"string\") {\n    locationProp = parsePath(locationProp);\n  }\n\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\",\n    state = null,\n    key = \"default\"\n  } = locationProp;\n  let location = useMemo(() => {\n    let trailingPathname = stripBasename(pathname, basename);\n\n    if (trailingPathname == null) {\n      return null;\n    }\n\n    return {\n      pathname: trailingPathname,\n      search,\n      hash,\n      state,\n      key\n    };\n  }, [basename, pathname, search, hash, state, key]);\n  process.env.NODE_ENV !== \"production\" ? warning(location != null, \"<Router basename=\\\"\" + basename + \"\\\"> is not able to match the URL \" + (\"\\\"\" + pathname + search + hash + \"\\\" because it does not start with the \") + \"basename, so the <Router> won't render anything.\") : void 0;\n\n  if (location == null) {\n    return null;\n  }\n\n  return /*#__PURE__*/createElement(NavigationContext.Provider, {\n    value: navigationContext\n  }, /*#__PURE__*/createElement(LocationContext.Provider, {\n    children: children,\n    value: {\n      location,\n      navigationType\n    }\n  }));\n}\n/**\r\n * A container for a nested tree of <Route> elements that renders the branch\r\n * that best matches the current location.\r\n *\r\n * @see https://reactrouter.com/docs/en/v6/api#routes\r\n */\n\n\nfunction Routes(_ref4) {\n  let {\n    children,\n    location\n  } = _ref4;\n  return useRoutes(createRoutesFromChildren(children), location);\n} ///////////////////////////////////////////////////////////////////////////////\n// HOOKS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\r\n * Returns the full href for the given \"to\" value. This is useful for building\r\n * custom links that are also accessible and preserve right-click behavior.\r\n *\r\n * @see https://reactrouter.com/docs/en/v6/api#usehref\r\n */\n\n\nfunction useHref(to) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useHref() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  let {\n    basename,\n    navigator\n  } = useContext(NavigationContext);\n  let {\n    hash,\n    pathname,\n    search\n  } = useResolvedPath(to);\n  let joinedPathname = pathname;\n\n  if (basename !== \"/\") {\n    let toPathname = getToPathname(to);\n    let endsWithSlash = toPathname != null && toPathname.endsWith(\"/\");\n    joinedPathname = pathname === \"/\" ? basename + (endsWithSlash ? \"/\" : \"\") : joinPaths([basename, pathname]);\n  }\n\n  return navigator.createHref({\n    pathname: joinedPathname,\n    search,\n    hash\n  });\n}\n/**\r\n * Returns true if this component is a descendant of a <Router>.\r\n *\r\n * @see https://reactrouter.com/docs/en/v6/api#useinroutercontext\r\n */\n\n\nfunction useInRouterContext() {\n  return useContext(LocationContext) != null;\n}\n/**\r\n * Returns the current location object, which represents the current URL in web\r\n * browsers.\r\n *\r\n * Note: If you're using this it may mean you're doing some of your own\r\n * \"routing\" in your app, and we'd like to know what your use case is. We may\r\n * be able to provide something higher-level to better suit your needs.\r\n *\r\n * @see https://reactrouter.com/docs/en/v6/api#uselocation\r\n */\n\n\nfunction useLocation() {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useLocation() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  return useContext(LocationContext).location;\n}\n/**\r\n * Returns the current navigation action which describes how the router came to\r\n * the current location, either by a pop, push, or replace on the history stack.\r\n *\r\n * @see https://reactrouter.com/docs/en/v6/api#usenavigationtype\r\n */\n\n\nfunction useNavigationType() {\n  return useContext(LocationContext).navigationType;\n}\n/**\r\n * Returns true if the URL for the given \"to\" value matches the current URL.\r\n * This is useful for components that need to know \"active\" state, e.g.\r\n * <NavLink>.\r\n *\r\n * @see https://reactrouter.com/docs/en/v6/api#usematch\r\n */\n\n\nfunction useMatch(pattern) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useMatch() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  let {\n    pathname\n  } = useLocation();\n  return useMemo(() => matchPath(pattern, pathname), [pathname, pattern]);\n}\n/**\r\n * The interface for the navigate() function returned from useNavigate().\r\n */\n\n/**\r\n * Returns an imperative method for changing the location. Used by <Link>s, but\r\n * may also be used by other elements to change the location.\r\n *\r\n * @see https://reactrouter.com/docs/en/v6/api#usenavigate\r\n */\n\n\nfunction useNavigate() {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useNavigate() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  let {\n    basename,\n    navigator\n  } = useContext(NavigationContext);\n  let {\n    matches\n  } = useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = useLocation();\n  let routePathnamesJson = JSON.stringify(matches.map(match => match.pathnameBase));\n  let activeRef = useRef(false);\n  useEffect(() => {\n    activeRef.current = true;\n  });\n  let navigate = useCallback(function (to, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    process.env.NODE_ENV !== \"production\" ? warning(activeRef.current, \"You should call navigate() in a React.useEffect(), not when \" + \"your component is first rendered.\") : void 0;\n    if (!activeRef.current) return;\n\n    if (typeof to === \"number\") {\n      navigator.go(to);\n      return;\n    }\n\n    let path = resolveTo(to, JSON.parse(routePathnamesJson), locationPathname);\n\n    if (basename !== \"/\") {\n      path.pathname = joinPaths([basename, path.pathname]);\n    }\n\n    (!!options.replace ? navigator.replace : navigator.push)(path, options.state);\n  }, [basename, navigator, routePathnamesJson, locationPathname]);\n  return navigate;\n}\n\nconst OutletContext = /*#__PURE__*/createContext(null);\n/**\r\n * Returns the context (if provided) for the child route at this level of the route\r\n * hierarchy.\r\n * @see https://reactrouter.com/docs/en/v6/api#useoutletcontext\r\n */\n\nfunction useOutletContext() {\n  return useContext(OutletContext);\n}\n/**\r\n * Returns the element for the child route at this level of the route\r\n * hierarchy. Used internally by <Outlet> to render child routes.\r\n *\r\n * @see https://reactrouter.com/docs/en/v6/api#useoutlet\r\n */\n\n\nfunction useOutlet(context) {\n  let outlet = useContext(RouteContext).outlet;\n\n  if (outlet) {\n    return /*#__PURE__*/createElement(OutletContext.Provider, {\n      value: context\n    }, outlet);\n  }\n\n  return outlet;\n}\n/**\r\n * Returns an object of key/value pairs of the dynamic params from the current\r\n * URL that were matched by the route path.\r\n *\r\n * @see https://reactrouter.com/docs/en/v6/api#useparams\r\n */\n\n\nfunction useParams() {\n  let {\n    matches\n  } = useContext(RouteContext);\n  let routeMatch = matches[matches.length - 1];\n  return routeMatch ? routeMatch.params : {};\n}\n/**\r\n * Resolves the pathname of the given `to` value against the current location.\r\n *\r\n * @see https://reactrouter.com/docs/en/v6/api#useresolvedpath\r\n */\n\n\nfunction useResolvedPath(to) {\n  let {\n    matches\n  } = useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = useLocation();\n  let routePathnamesJson = JSON.stringify(matches.map(match => match.pathnameBase));\n  return useMemo(() => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname), [to, routePathnamesJson, locationPathname]);\n}\n/**\r\n * Returns the element of the route that matched the current location, prepared\r\n * with the correct context to render the remainder of the route tree. Route\r\n * elements in the tree must render an <Outlet> to render their child route's\r\n * element.\r\n *\r\n * @see https://reactrouter.com/docs/en/v6/api#useroutes\r\n */\n\n\nfunction useRoutes(routes, locationArg) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useRoutes() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  let {\n    matches: parentMatches\n  } = useContext(RouteContext);\n  let routeMatch = parentMatches[parentMatches.length - 1];\n  let parentParams = routeMatch ? routeMatch.params : {};\n  let parentPathname = routeMatch ? routeMatch.pathname : \"/\";\n  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : \"/\";\n  let parentRoute = routeMatch && routeMatch.route;\n\n  if (process.env.NODE_ENV !== \"production\") {\n    // You won't get a warning about 2 different <Routes> under a <Route>\n    // without a trailing *, but this is a best-effort warning anyway since we\n    // cannot even give the warning unless they land at the parent route.\n    //\n    // Example:\n    //\n    // <Routes>\n    //   {/* This route path MUST end with /* because otherwise\n    //       it will never match /blog/post/123 */}\n    //   <Route path=\"blog\" element={<Blog />} />\n    //   <Route path=\"blog/feed\" element={<BlogFeed />} />\n    // </Routes>\n    //\n    // function Blog() {\n    //   return (\n    //     <Routes>\n    //       <Route path=\"post/:id\" element={<Post />} />\n    //     </Routes>\n    //   );\n    // }\n    let parentPath = parentRoute && parentRoute.path || \"\";\n    warningOnce(parentPathname, !parentRoute || parentPath.endsWith(\"*\"), \"You rendered descendant <Routes> (or called `useRoutes()`) at \" + (\"\\\"\" + parentPathname + \"\\\" (under <Route path=\\\"\" + parentPath + \"\\\">) but the \") + \"parent route path has no trailing \\\"*\\\". This means if you navigate \" + \"deeper, the parent won't match anymore and therefore the child \" + \"routes will never render.\\n\\n\" + (\"Please change the parent <Route path=\\\"\" + parentPath + \"\\\"> to <Route \") + (\"path=\\\"\" + (parentPath === \"/\" ? \"*\" : parentPath + \"/*\") + \"\\\">.\"));\n  }\n\n  let locationFromContext = useLocation();\n  let location;\n\n  if (locationArg) {\n    var _parsedLocationArg$pa;\n\n    let parsedLocationArg = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n    !(parentPathnameBase === \"/\" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"When overriding the location using `<Routes location>` or `useRoutes(routes, location)`, \" + \"the location pathname must begin with the portion of the URL pathname that was \" + (\"matched by all parent routes. The current pathname base is \\\"\" + parentPathnameBase + \"\\\" \") + (\"but pathname \\\"\" + parsedLocationArg.pathname + \"\\\" was given in the `location` prop.\")) : invariant(false) : void 0;\n    location = parsedLocationArg;\n  } else {\n    location = locationFromContext;\n  }\n\n  let pathname = location.pathname || \"/\";\n  let remainingPathname = parentPathnameBase === \"/\" ? pathname : pathname.slice(parentPathnameBase.length) || \"/\";\n  let matches = matchRoutes(routes, {\n    pathname: remainingPathname\n  });\n\n  if (process.env.NODE_ENV !== \"production\") {\n    process.env.NODE_ENV !== \"production\" ? warning(parentRoute || matches != null, \"No routes matched location \\\"\" + location.pathname + location.search + location.hash + \"\\\" \") : void 0;\n    process.env.NODE_ENV !== \"production\" ? warning(matches == null || matches[matches.length - 1].route.element !== undefined, \"Matched leaf route at location \\\"\" + location.pathname + location.search + location.hash + \"\\\" does not have an element. \" + \"This means it will render an <Outlet /> with a null value by default resulting in an \\\"empty\\\" page.\") : void 0;\n  }\n\n  return _renderMatches(matches && matches.map(match => Object.assign({}, match, {\n    params: Object.assign({}, parentParams, match.params),\n    pathname: joinPaths([parentPathnameBase, match.pathname]),\n    pathnameBase: match.pathnameBase === \"/\" ? parentPathnameBase : joinPaths([parentPathnameBase, match.pathnameBase])\n  })), parentMatches);\n} ///////////////////////////////////////////////////////////////////////////////\n// UTILS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\r\n * Creates a route config from a React \"children\" object, which is usually\r\n * either a `<Route>` element or an array of them. Used internally by\r\n * `<Routes>` to create a route config from its children.\r\n *\r\n * @see https://reactrouter.com/docs/en/v6/api#createroutesfromchildren\r\n */\n\n\nfunction createRoutesFromChildren(children) {\n  let routes = [];\n  Children.forEach(children, element => {\n    if (! /*#__PURE__*/isValidElement(element)) {\n      // Ignore non-elements. This allows people to more easily inline\n      // conditionals in their route config.\n      return;\n    }\n\n    if (element.type === Fragment) {\n      // Transparently support React.Fragment and its children.\n      routes.push.apply(routes, createRoutesFromChildren(element.props.children));\n      return;\n    }\n\n    !(element.type === Route) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"[\" + (typeof element.type === \"string\" ? element.type : element.type.name) + \"] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>\") : invariant(false) : void 0;\n    let route = {\n      caseSensitive: element.props.caseSensitive,\n      element: element.props.element,\n      index: element.props.index,\n      path: element.props.path\n    };\n\n    if (element.props.children) {\n      route.children = createRoutesFromChildren(element.props.children);\n    }\n\n    routes.push(route);\n  });\n  return routes;\n}\n/**\r\n * The parameters that were parsed from the URL path.\r\n */\n\n/**\r\n * Returns a path with params interpolated.\r\n *\r\n * @see https://reactrouter.com/docs/en/v6/api#generatepath\r\n */\n\n\nfunction generatePath(path, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  return path.replace(/:(\\w+)/g, (_, key) => {\n    !(params[key] != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Missing \\\":\" + key + \"\\\" param\") : invariant(false) : void 0;\n    return params[key];\n  }).replace(/\\/*\\*$/, _ => params[\"*\"] == null ? \"\" : params[\"*\"].replace(/^\\/*/, \"/\"));\n}\n/**\r\n * A RouteMatch contains info about how a route matched a URL.\r\n */\n\n/**\r\n * Matches the given routes to a location and returns the match data.\r\n *\r\n * @see https://reactrouter.com/docs/en/v6/api#matchroutes\r\n */\n\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], pathname);\n  }\n\n  return matches;\n}\n\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n\n  routes.forEach((route, index) => {\n    let meta = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      !meta.relativePath.startsWith(parentPath) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\") : invariant(false) : void 0;\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      !(route.index !== true) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\")) : invariant(false) : void 0;\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  });\n  return branches;\n}\n\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\n\nconst isSplat = s => s === \"*\";\n\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\n\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ? // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\n\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: joinPaths([matchedPathname, match.pathnameBase]),\n      route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n/**\r\n * Renders the result of `matchRoutes()` into a React element.\r\n */\n\n\nfunction renderMatches(matches) {\n  return _renderMatches(matches);\n}\n\nfunction _renderMatches(matches, parentMatches) {\n  if (parentMatches === void 0) {\n    parentMatches = [];\n  }\n\n  if (matches == null) return null;\n  return matches.reduceRight((outlet, match, index) => {\n    return /*#__PURE__*/createElement(RouteContext.Provider, {\n      children: match.route.element !== undefined ? match.route.element : /*#__PURE__*/createElement(Outlet, null),\n      value: {\n        outlet,\n        matches: parentMatches.concat(matches.slice(0, index + 1))\n      }\n    });\n  }, null);\n}\n/**\r\n * A PathPattern is used to match on some portion of a URL pathname.\r\n */\n\n/**\r\n * Performs pattern matching on a URL pathname and returns information about\r\n * the match.\r\n *\r\n * @see https://reactrouter.com/docs/en/v6/api#matchpath\r\n */\n\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n\n  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = paramNames.reduce((memo, paramName, index) => {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\n\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n\n  if (end === void 0) {\n    end = true;\n  }\n\n  process.env.NODE_ENV !== \"production\" ? warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\")) : void 0;\n  let paramNames = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/:(\\w+)/g, (_, paramName) => {\n    paramNames.push(paramName);\n    return \"([^\\\\/]+)\";\n  });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else {\n    regexpSource += end ? \"\\\\/*$\" // When matching to the end, ignore trailing slashes\n    : // Otherwise, match a word boundary or a proceeding /. The word boundary restricts\n    // parent routes to matching only their own words and nothing more, e.g. parent\n    // route \"/home\" should not match \"/home2\".\n    \"(?:\\\\b|\\\\/|$)\";\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    process.env.NODE_ENV !== \"production\" ? warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\")) : void 0;\n    return value;\n  }\n}\n/**\r\n * Returns a resolved path object relative to the given pathname.\r\n *\r\n * @see https://reactrouter.com/docs/en/v6/api#resolvepath\r\n */\n\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction resolveTo(toArg, routePathnames, locationPathname) {\n  let to = typeof toArg === \"string\" ? parsePath(toArg) : toArg;\n  let toPathname = toArg === \"\" || to.pathname === \"\" ? \"/\" : to.pathname; // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  let from;\n\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original to value had one.\n\n  if (toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\") && !path.pathname.endsWith(\"/\")) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  let nextChar = pathname.charAt(basename.length);\n\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(basename.length) || \"/\";\n}\n\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash; ///////////////////////////////////////////////////////////////////////////////\n\n\nexport { MemoryRouter, Navigate, Outlet, Route, Router, Routes, LocationContext as UNSAFE_LocationContext, NavigationContext as UNSAFE_NavigationContext, RouteContext as UNSAFE_RouteContext, createRoutesFromChildren, generatePath, matchPath, matchRoutes, renderMatches, resolvePath, useHref, useInRouterContext, useLocation, useMatch, useNavigate, useNavigationType, useOutlet, useOutletContext, useParams, useResolvedPath, useRoutes };","map":{"version":3,"mappings":"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","names":["createContext","useRef","useState","useLayoutEffect","createElement","useContext","useEffect","useMemo","useCallback","Children","isValidElement","Fragment","createMemoryHistory","Action","parsePath","invariant","cond","message","Error","warning","console","warn","e","alreadyWarned","warningOnce","key","process","env","NODE_ENV","NavigationContext","displayName","LocationContext","RouteContext","outlet","matches","MemoryRouter","_ref","basename","children","initialEntries","initialIndex","historyRef","current","history","state","setState","action","location","listen","Router","navigationType","navigator","Navigate","_ref2","to","replace","useInRouterContext","static","navigate","useNavigate","Outlet","props","useOutlet","context","Route","_props","_ref3","basenameProp","locationProp","Pop","staticProp","normalizePathname","navigationContext","pathname","search","hash","trailingPathname","stripBasename","Provider","value","Routes","_ref4","useRoutes","createRoutesFromChildren","useHref","useResolvedPath","joinedPathname","toPathname","getToPathname","endsWithSlash","endsWith","joinPaths","createHref","useLocation","useNavigationType","useMatch","pattern","matchPath","locationPathname","routePathnamesJson","JSON","stringify","map","match","pathnameBase","activeRef","options","go","path","resolveTo","parse","push","OutletContext","useOutletContext","useParams","routeMatch","length","params","routes","locationArg","parentMatches","parentParams","parentPathname","parentPathnameBase","parentRoute","route","parentPath","locationFromContext","_parsedLocationArg$pa","parsedLocationArg","startsWith","remainingPathname","slice","matchRoutes","element","undefined","_renderMatches","Object","assign","forEach","type","apply","name","caseSensitive","index","generatePath","_","branches","flattenRoutes","rankRouteBranches","i","matchRouteBranch","parentsMeta","meta","relativePath","childrenIndex","routesMeta","concat","score","computeScore","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","segments","split","initialScore","some","filter","reduce","segment","test","siblings","every","n","branch","matchedParams","matchedPathname","end","renderMatches","reduceRight","matcher","paramNames","compilePath","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","regexpSource","RegExp","decodeURIComponent","error","resolvePath","fromPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","join","toArg","routePathnames","from","routePathnameIndex","toSegments","shift","toLowerCase","nextChar","charAt","paths","UNSAFE_LocationContext","UNSAFE_NavigationContext","UNSAFE_RouteContext"],"sources":["D:/SchoolWork/Computer Science/Year 2/NEA/NEA/frontend/node_modules/react-router/index.js"],"sourcesContent":["/**\r\n * React Router v6.2.1\r\n *\r\n * Copyright (c) Remix Software Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE.md file in the root directory of this source tree.\r\n *\r\n * @license MIT\r\n */\r\nimport { createContext, useRef, useState, useLayoutEffect, createElement, useContext, useEffect, useMemo, useCallback, Children, isValidElement, Fragment } from 'react';\r\nimport { createMemoryHistory, Action, parsePath } from 'history';\r\n\r\nfunction invariant(cond, message) {\r\n  if (!cond) throw new Error(message);\r\n}\r\n\r\nfunction warning(cond, message) {\r\n  if (!cond) {\r\n    // eslint-disable-next-line no-console\r\n    if (typeof console !== \"undefined\") console.warn(message);\r\n\r\n    try {\r\n      // Welcome to debugging React Router!\r\n      //\r\n      // This error is thrown as a convenience so you can more easily\r\n      // find the source for a warning that appears in the console by\r\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\r\n      throw new Error(message); // eslint-disable-next-line no-empty\r\n    } catch (e) {}\r\n  }\r\n}\r\n\r\nconst alreadyWarned = {};\r\n\r\nfunction warningOnce(key, cond, message) {\r\n  if (!cond && !alreadyWarned[key]) {\r\n    alreadyWarned[key] = true;\r\n    process.env.NODE_ENV !== \"production\" ? warning(false, message) : void 0;\r\n  }\r\n} ///////////////////////////////////////////////////////////////////////////////\r\n// CONTEXT\r\n///////////////////////////////////////////////////////////////////////////////\r\n\r\n/**\r\n * A Navigator is a \"location changer\"; it's how you get to different locations.\r\n *\r\n * Every history instance conforms to the Navigator interface, but the\r\n * distinction is useful primarily when it comes to the low-level <Router> API\r\n * where both the location and a navigator must be provided separately in order\r\n * to avoid \"tearing\" that may occur in a suspense-enabled app if the action\r\n * and/or location were to be read directly from the history instance.\r\n */\r\n\r\n\r\nconst NavigationContext = /*#__PURE__*/createContext(null);\r\n\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  NavigationContext.displayName = \"Navigation\";\r\n}\r\n\r\nconst LocationContext = /*#__PURE__*/createContext(null);\r\n\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  LocationContext.displayName = \"Location\";\r\n}\r\n\r\nconst RouteContext = /*#__PURE__*/createContext({\r\n  outlet: null,\r\n  matches: []\r\n});\r\n\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  RouteContext.displayName = \"Route\";\r\n} ///////////////////////////////////////////////////////////////////////////////\r\n// COMPONENTS\r\n///////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n/**\r\n * A <Router> that stores all entries in memory.\r\n *\r\n * @see https://reactrouter.com/docs/en/v6/api#memoryrouter\r\n */\r\nfunction MemoryRouter(_ref) {\r\n  let {\r\n    basename,\r\n    children,\r\n    initialEntries,\r\n    initialIndex\r\n  } = _ref;\r\n  let historyRef = useRef();\r\n\r\n  if (historyRef.current == null) {\r\n    historyRef.current = createMemoryHistory({\r\n      initialEntries,\r\n      initialIndex\r\n    });\r\n  }\r\n\r\n  let history = historyRef.current;\r\n  let [state, setState] = useState({\r\n    action: history.action,\r\n    location: history.location\r\n  });\r\n  useLayoutEffect(() => history.listen(setState), [history]);\r\n  return /*#__PURE__*/createElement(Router, {\r\n    basename: basename,\r\n    children: children,\r\n    location: state.location,\r\n    navigationType: state.action,\r\n    navigator: history\r\n  });\r\n}\r\n\r\n/**\r\n * Changes the current location.\r\n *\r\n * Note: This API is mostly useful in React.Component subclasses that are not\r\n * able to use hooks. In functional components, we recommend you use the\r\n * `useNavigate` hook instead.\r\n *\r\n * @see https://reactrouter.com/docs/en/v6/api#navigate\r\n */\r\nfunction Navigate(_ref2) {\r\n  let {\r\n    to,\r\n    replace,\r\n    state\r\n  } = _ref2;\r\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of\r\n  // the router loaded. We can help them understand how to avoid that.\r\n  \"<Navigate> may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\r\n  process.env.NODE_ENV !== \"production\" ? warning(!useContext(NavigationContext).static, \"<Navigate> must not be used on the initial render in a <StaticRouter>. \" + \"This is a no-op, but you should modify your code so the <Navigate> is \" + \"only ever rendered in response to some user interaction or state change.\") : void 0;\r\n  let navigate = useNavigate();\r\n  useEffect(() => {\r\n    navigate(to, {\r\n      replace,\r\n      state\r\n    });\r\n  });\r\n  return null;\r\n}\r\n\r\n/**\r\n * Renders the child route's element, if there is one.\r\n *\r\n * @see https://reactrouter.com/docs/en/v6/api#outlet\r\n */\r\nfunction Outlet(props) {\r\n  return useOutlet(props.context);\r\n}\r\n\r\n/**\r\n * Declares an element that should be rendered at a certain URL path.\r\n *\r\n * @see https://reactrouter.com/docs/en/v6/api#route\r\n */\r\nfunction Route(_props) {\r\n   process.env.NODE_ENV !== \"production\" ? invariant(false, \"A <Route> is only ever to be used as the child of <Routes> element, \" + \"never rendered directly. Please wrap your <Route> in a <Routes>.\") : invariant(false) ;\r\n}\r\n\r\n/**\r\n * Provides location context for the rest of the app.\r\n *\r\n * Note: You usually won't render a <Router> directly. Instead, you'll render a\r\n * router that is more specific to your environment such as a <BrowserRouter>\r\n * in web browsers or a <StaticRouter> for server rendering.\r\n *\r\n * @see https://reactrouter.com/docs/en/v6/api#router\r\n */\r\nfunction Router(_ref3) {\r\n  let {\r\n    basename: basenameProp = \"/\",\r\n    children = null,\r\n    location: locationProp,\r\n    navigationType = Action.Pop,\r\n    navigator,\r\n    static: staticProp = false\r\n  } = _ref3;\r\n  !!useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"You cannot render a <Router> inside another <Router>.\" + \" You should never have more than one in your app.\") : invariant(false) : void 0;\r\n  let basename = normalizePathname(basenameProp);\r\n  let navigationContext = useMemo(() => ({\r\n    basename,\r\n    navigator,\r\n    static: staticProp\r\n  }), [basename, navigator, staticProp]);\r\n\r\n  if (typeof locationProp === \"string\") {\r\n    locationProp = parsePath(locationProp);\r\n  }\r\n\r\n  let {\r\n    pathname = \"/\",\r\n    search = \"\",\r\n    hash = \"\",\r\n    state = null,\r\n    key = \"default\"\r\n  } = locationProp;\r\n  let location = useMemo(() => {\r\n    let trailingPathname = stripBasename(pathname, basename);\r\n\r\n    if (trailingPathname == null) {\r\n      return null;\r\n    }\r\n\r\n    return {\r\n      pathname: trailingPathname,\r\n      search,\r\n      hash,\r\n      state,\r\n      key\r\n    };\r\n  }, [basename, pathname, search, hash, state, key]);\r\n  process.env.NODE_ENV !== \"production\" ? warning(location != null, \"<Router basename=\\\"\" + basename + \"\\\"> is not able to match the URL \" + (\"\\\"\" + pathname + search + hash + \"\\\" because it does not start with the \") + \"basename, so the <Router> won't render anything.\") : void 0;\r\n\r\n  if (location == null) {\r\n    return null;\r\n  }\r\n\r\n  return /*#__PURE__*/createElement(NavigationContext.Provider, {\r\n    value: navigationContext\r\n  }, /*#__PURE__*/createElement(LocationContext.Provider, {\r\n    children: children,\r\n    value: {\r\n      location,\r\n      navigationType\r\n    }\r\n  }));\r\n}\r\n\r\n/**\r\n * A container for a nested tree of <Route> elements that renders the branch\r\n * that best matches the current location.\r\n *\r\n * @see https://reactrouter.com/docs/en/v6/api#routes\r\n */\r\nfunction Routes(_ref4) {\r\n  let {\r\n    children,\r\n    location\r\n  } = _ref4;\r\n  return useRoutes(createRoutesFromChildren(children), location);\r\n} ///////////////////////////////////////////////////////////////////////////////\r\n// HOOKS\r\n///////////////////////////////////////////////////////////////////////////////\r\n\r\n/**\r\n * Returns the full href for the given \"to\" value. This is useful for building\r\n * custom links that are also accessible and preserve right-click behavior.\r\n *\r\n * @see https://reactrouter.com/docs/en/v6/api#usehref\r\n */\r\n\r\nfunction useHref(to) {\r\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\r\n  // router loaded. We can help them understand how to avoid that.\r\n  \"useHref() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\r\n  let {\r\n    basename,\r\n    navigator\r\n  } = useContext(NavigationContext);\r\n  let {\r\n    hash,\r\n    pathname,\r\n    search\r\n  } = useResolvedPath(to);\r\n  let joinedPathname = pathname;\r\n\r\n  if (basename !== \"/\") {\r\n    let toPathname = getToPathname(to);\r\n    let endsWithSlash = toPathname != null && toPathname.endsWith(\"/\");\r\n    joinedPathname = pathname === \"/\" ? basename + (endsWithSlash ? \"/\" : \"\") : joinPaths([basename, pathname]);\r\n  }\r\n\r\n  return navigator.createHref({\r\n    pathname: joinedPathname,\r\n    search,\r\n    hash\r\n  });\r\n}\r\n/**\r\n * Returns true if this component is a descendant of a <Router>.\r\n *\r\n * @see https://reactrouter.com/docs/en/v6/api#useinroutercontext\r\n */\r\n\r\nfunction useInRouterContext() {\r\n  return useContext(LocationContext) != null;\r\n}\r\n/**\r\n * Returns the current location object, which represents the current URL in web\r\n * browsers.\r\n *\r\n * Note: If you're using this it may mean you're doing some of your own\r\n * \"routing\" in your app, and we'd like to know what your use case is. We may\r\n * be able to provide something higher-level to better suit your needs.\r\n *\r\n * @see https://reactrouter.com/docs/en/v6/api#uselocation\r\n */\r\n\r\nfunction useLocation() {\r\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\r\n  // router loaded. We can help them understand how to avoid that.\r\n  \"useLocation() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\r\n  return useContext(LocationContext).location;\r\n}\r\n\r\n/**\r\n * Returns the current navigation action which describes how the router came to\r\n * the current location, either by a pop, push, or replace on the history stack.\r\n *\r\n * @see https://reactrouter.com/docs/en/v6/api#usenavigationtype\r\n */\r\nfunction useNavigationType() {\r\n  return useContext(LocationContext).navigationType;\r\n}\r\n/**\r\n * Returns true if the URL for the given \"to\" value matches the current URL.\r\n * This is useful for components that need to know \"active\" state, e.g.\r\n * <NavLink>.\r\n *\r\n * @see https://reactrouter.com/docs/en/v6/api#usematch\r\n */\r\n\r\nfunction useMatch(pattern) {\r\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\r\n  // router loaded. We can help them understand how to avoid that.\r\n  \"useMatch() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\r\n  let {\r\n    pathname\r\n  } = useLocation();\r\n  return useMemo(() => matchPath(pattern, pathname), [pathname, pattern]);\r\n}\r\n/**\r\n * The interface for the navigate() function returned from useNavigate().\r\n */\r\n\r\n/**\r\n * Returns an imperative method for changing the location. Used by <Link>s, but\r\n * may also be used by other elements to change the location.\r\n *\r\n * @see https://reactrouter.com/docs/en/v6/api#usenavigate\r\n */\r\nfunction useNavigate() {\r\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\r\n  // router loaded. We can help them understand how to avoid that.\r\n  \"useNavigate() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\r\n  let {\r\n    basename,\r\n    navigator\r\n  } = useContext(NavigationContext);\r\n  let {\r\n    matches\r\n  } = useContext(RouteContext);\r\n  let {\r\n    pathname: locationPathname\r\n  } = useLocation();\r\n  let routePathnamesJson = JSON.stringify(matches.map(match => match.pathnameBase));\r\n  let activeRef = useRef(false);\r\n  useEffect(() => {\r\n    activeRef.current = true;\r\n  });\r\n  let navigate = useCallback(function (to, options) {\r\n    if (options === void 0) {\r\n      options = {};\r\n    }\r\n\r\n    process.env.NODE_ENV !== \"production\" ? warning(activeRef.current, \"You should call navigate() in a React.useEffect(), not when \" + \"your component is first rendered.\") : void 0;\r\n    if (!activeRef.current) return;\r\n\r\n    if (typeof to === \"number\") {\r\n      navigator.go(to);\r\n      return;\r\n    }\r\n\r\n    let path = resolveTo(to, JSON.parse(routePathnamesJson), locationPathname);\r\n\r\n    if (basename !== \"/\") {\r\n      path.pathname = joinPaths([basename, path.pathname]);\r\n    }\r\n\r\n    (!!options.replace ? navigator.replace : navigator.push)(path, options.state);\r\n  }, [basename, navigator, routePathnamesJson, locationPathname]);\r\n  return navigate;\r\n}\r\nconst OutletContext = /*#__PURE__*/createContext(null);\r\n/**\r\n * Returns the context (if provided) for the child route at this level of the route\r\n * hierarchy.\r\n * @see https://reactrouter.com/docs/en/v6/api#useoutletcontext\r\n */\r\n\r\nfunction useOutletContext() {\r\n  return useContext(OutletContext);\r\n}\r\n/**\r\n * Returns the element for the child route at this level of the route\r\n * hierarchy. Used internally by <Outlet> to render child routes.\r\n *\r\n * @see https://reactrouter.com/docs/en/v6/api#useoutlet\r\n */\r\n\r\nfunction useOutlet(context) {\r\n  let outlet = useContext(RouteContext).outlet;\r\n\r\n  if (outlet) {\r\n    return /*#__PURE__*/createElement(OutletContext.Provider, {\r\n      value: context\r\n    }, outlet);\r\n  }\r\n\r\n  return outlet;\r\n}\r\n/**\r\n * Returns an object of key/value pairs of the dynamic params from the current\r\n * URL that were matched by the route path.\r\n *\r\n * @see https://reactrouter.com/docs/en/v6/api#useparams\r\n */\r\n\r\nfunction useParams() {\r\n  let {\r\n    matches\r\n  } = useContext(RouteContext);\r\n  let routeMatch = matches[matches.length - 1];\r\n  return routeMatch ? routeMatch.params : {};\r\n}\r\n/**\r\n * Resolves the pathname of the given `to` value against the current location.\r\n *\r\n * @see https://reactrouter.com/docs/en/v6/api#useresolvedpath\r\n */\r\n\r\nfunction useResolvedPath(to) {\r\n  let {\r\n    matches\r\n  } = useContext(RouteContext);\r\n  let {\r\n    pathname: locationPathname\r\n  } = useLocation();\r\n  let routePathnamesJson = JSON.stringify(matches.map(match => match.pathnameBase));\r\n  return useMemo(() => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname), [to, routePathnamesJson, locationPathname]);\r\n}\r\n/**\r\n * Returns the element of the route that matched the current location, prepared\r\n * with the correct context to render the remainder of the route tree. Route\r\n * elements in the tree must render an <Outlet> to render their child route's\r\n * element.\r\n *\r\n * @see https://reactrouter.com/docs/en/v6/api#useroutes\r\n */\r\n\r\nfunction useRoutes(routes, locationArg) {\r\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\r\n  // router loaded. We can help them understand how to avoid that.\r\n  \"useRoutes() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\r\n  let {\r\n    matches: parentMatches\r\n  } = useContext(RouteContext);\r\n  let routeMatch = parentMatches[parentMatches.length - 1];\r\n  let parentParams = routeMatch ? routeMatch.params : {};\r\n  let parentPathname = routeMatch ? routeMatch.pathname : \"/\";\r\n  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : \"/\";\r\n  let parentRoute = routeMatch && routeMatch.route;\r\n\r\n  if (process.env.NODE_ENV !== \"production\") {\r\n    // You won't get a warning about 2 different <Routes> under a <Route>\r\n    // without a trailing *, but this is a best-effort warning anyway since we\r\n    // cannot even give the warning unless they land at the parent route.\r\n    //\r\n    // Example:\r\n    //\r\n    // <Routes>\r\n    //   {/* This route path MUST end with /* because otherwise\r\n    //       it will never match /blog/post/123 */}\r\n    //   <Route path=\"blog\" element={<Blog />} />\r\n    //   <Route path=\"blog/feed\" element={<BlogFeed />} />\r\n    // </Routes>\r\n    //\r\n    // function Blog() {\r\n    //   return (\r\n    //     <Routes>\r\n    //       <Route path=\"post/:id\" element={<Post />} />\r\n    //     </Routes>\r\n    //   );\r\n    // }\r\n    let parentPath = parentRoute && parentRoute.path || \"\";\r\n    warningOnce(parentPathname, !parentRoute || parentPath.endsWith(\"*\"), \"You rendered descendant <Routes> (or called `useRoutes()`) at \" + (\"\\\"\" + parentPathname + \"\\\" (under <Route path=\\\"\" + parentPath + \"\\\">) but the \") + \"parent route path has no trailing \\\"*\\\". This means if you navigate \" + \"deeper, the parent won't match anymore and therefore the child \" + \"routes will never render.\\n\\n\" + (\"Please change the parent <Route path=\\\"\" + parentPath + \"\\\"> to <Route \") + (\"path=\\\"\" + (parentPath === \"/\" ? \"*\" : parentPath + \"/*\") + \"\\\">.\"));\r\n  }\r\n\r\n  let locationFromContext = useLocation();\r\n  let location;\r\n\r\n  if (locationArg) {\r\n    var _parsedLocationArg$pa;\r\n\r\n    let parsedLocationArg = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\r\n    !(parentPathnameBase === \"/\" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"When overriding the location using `<Routes location>` or `useRoutes(routes, location)`, \" + \"the location pathname must begin with the portion of the URL pathname that was \" + (\"matched by all parent routes. The current pathname base is \\\"\" + parentPathnameBase + \"\\\" \") + (\"but pathname \\\"\" + parsedLocationArg.pathname + \"\\\" was given in the `location` prop.\")) : invariant(false) : void 0;\r\n    location = parsedLocationArg;\r\n  } else {\r\n    location = locationFromContext;\r\n  }\r\n\r\n  let pathname = location.pathname || \"/\";\r\n  let remainingPathname = parentPathnameBase === \"/\" ? pathname : pathname.slice(parentPathnameBase.length) || \"/\";\r\n  let matches = matchRoutes(routes, {\r\n    pathname: remainingPathname\r\n  });\r\n\r\n  if (process.env.NODE_ENV !== \"production\") {\r\n    process.env.NODE_ENV !== \"production\" ? warning(parentRoute || matches != null, \"No routes matched location \\\"\" + location.pathname + location.search + location.hash + \"\\\" \") : void 0;\r\n    process.env.NODE_ENV !== \"production\" ? warning(matches == null || matches[matches.length - 1].route.element !== undefined, \"Matched leaf route at location \\\"\" + location.pathname + location.search + location.hash + \"\\\" does not have an element. \" + \"This means it will render an <Outlet /> with a null value by default resulting in an \\\"empty\\\" page.\") : void 0;\r\n  }\r\n\r\n  return _renderMatches(matches && matches.map(match => Object.assign({}, match, {\r\n    params: Object.assign({}, parentParams, match.params),\r\n    pathname: joinPaths([parentPathnameBase, match.pathname]),\r\n    pathnameBase: match.pathnameBase === \"/\" ? parentPathnameBase : joinPaths([parentPathnameBase, match.pathnameBase])\r\n  })), parentMatches);\r\n} ///////////////////////////////////////////////////////////////////////////////\r\n// UTILS\r\n///////////////////////////////////////////////////////////////////////////////\r\n\r\n/**\r\n * Creates a route config from a React \"children\" object, which is usually\r\n * either a `<Route>` element or an array of them. Used internally by\r\n * `<Routes>` to create a route config from its children.\r\n *\r\n * @see https://reactrouter.com/docs/en/v6/api#createroutesfromchildren\r\n */\r\n\r\nfunction createRoutesFromChildren(children) {\r\n  let routes = [];\r\n  Children.forEach(children, element => {\r\n    if (! /*#__PURE__*/isValidElement(element)) {\r\n      // Ignore non-elements. This allows people to more easily inline\r\n      // conditionals in their route config.\r\n      return;\r\n    }\r\n\r\n    if (element.type === Fragment) {\r\n      // Transparently support React.Fragment and its children.\r\n      routes.push.apply(routes, createRoutesFromChildren(element.props.children));\r\n      return;\r\n    }\r\n\r\n    !(element.type === Route) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"[\" + (typeof element.type === \"string\" ? element.type : element.type.name) + \"] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>\") : invariant(false) : void 0;\r\n    let route = {\r\n      caseSensitive: element.props.caseSensitive,\r\n      element: element.props.element,\r\n      index: element.props.index,\r\n      path: element.props.path\r\n    };\r\n\r\n    if (element.props.children) {\r\n      route.children = createRoutesFromChildren(element.props.children);\r\n    }\r\n\r\n    routes.push(route);\r\n  });\r\n  return routes;\r\n}\r\n/**\r\n * The parameters that were parsed from the URL path.\r\n */\r\n\r\n/**\r\n * Returns a path with params interpolated.\r\n *\r\n * @see https://reactrouter.com/docs/en/v6/api#generatepath\r\n */\r\nfunction generatePath(path, params) {\r\n  if (params === void 0) {\r\n    params = {};\r\n  }\r\n\r\n  return path.replace(/:(\\w+)/g, (_, key) => {\r\n    !(params[key] != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Missing \\\":\" + key + \"\\\" param\") : invariant(false) : void 0;\r\n    return params[key];\r\n  }).replace(/\\/*\\*$/, _ => params[\"*\"] == null ? \"\" : params[\"*\"].replace(/^\\/*/, \"/\"));\r\n}\r\n/**\r\n * A RouteMatch contains info about how a route matched a URL.\r\n */\r\n\r\n/**\r\n * Matches the given routes to a location and returns the match data.\r\n *\r\n * @see https://reactrouter.com/docs/en/v6/api#matchroutes\r\n */\r\nfunction matchRoutes(routes, locationArg, basename) {\r\n  if (basename === void 0) {\r\n    basename = \"/\";\r\n  }\r\n\r\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\r\n  let pathname = stripBasename(location.pathname || \"/\", basename);\r\n\r\n  if (pathname == null) {\r\n    return null;\r\n  }\r\n\r\n  let branches = flattenRoutes(routes);\r\n  rankRouteBranches(branches);\r\n  let matches = null;\r\n\r\n  for (let i = 0; matches == null && i < branches.length; ++i) {\r\n    matches = matchRouteBranch(branches[i], pathname);\r\n  }\r\n\r\n  return matches;\r\n}\r\n\r\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\r\n  if (branches === void 0) {\r\n    branches = [];\r\n  }\r\n\r\n  if (parentsMeta === void 0) {\r\n    parentsMeta = [];\r\n  }\r\n\r\n  if (parentPath === void 0) {\r\n    parentPath = \"\";\r\n  }\r\n\r\n  routes.forEach((route, index) => {\r\n    let meta = {\r\n      relativePath: route.path || \"\",\r\n      caseSensitive: route.caseSensitive === true,\r\n      childrenIndex: index,\r\n      route\r\n    };\r\n\r\n    if (meta.relativePath.startsWith(\"/\")) {\r\n      !meta.relativePath.startsWith(parentPath) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\") : invariant(false) : void 0;\r\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\r\n    }\r\n\r\n    let path = joinPaths([parentPath, meta.relativePath]);\r\n    let routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\r\n    // route tree depth-first and child routes appear before their parents in\r\n    // the \"flattened\" version.\r\n\r\n    if (route.children && route.children.length > 0) {\r\n      !(route.index !== true) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\")) : invariant(false) : void 0;\r\n      flattenRoutes(route.children, branches, routesMeta, path);\r\n    } // Routes without a path shouldn't ever match by themselves unless they are\r\n    // index routes, so don't add them to the list of possible branches.\r\n\r\n\r\n    if (route.path == null && !route.index) {\r\n      return;\r\n    }\r\n\r\n    branches.push({\r\n      path,\r\n      score: computeScore(path, route.index),\r\n      routesMeta\r\n    });\r\n  });\r\n  return branches;\r\n}\r\n\r\nfunction rankRouteBranches(branches) {\r\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\r\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\r\n}\r\n\r\nconst paramRe = /^:\\w+$/;\r\nconst dynamicSegmentValue = 3;\r\nconst indexRouteValue = 2;\r\nconst emptySegmentValue = 1;\r\nconst staticSegmentValue = 10;\r\nconst splatPenalty = -2;\r\n\r\nconst isSplat = s => s === \"*\";\r\n\r\nfunction computeScore(path, index) {\r\n  let segments = path.split(\"/\");\r\n  let initialScore = segments.length;\r\n\r\n  if (segments.some(isSplat)) {\r\n    initialScore += splatPenalty;\r\n  }\r\n\r\n  if (index) {\r\n    initialScore += indexRouteValue;\r\n  }\r\n\r\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\r\n}\r\n\r\nfunction compareIndexes(a, b) {\r\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\r\n  return siblings ? // If two routes are siblings, we should try to match the earlier sibling\r\n  // first. This allows people to have fine-grained control over the matching\r\n  // behavior by simply putting routes with identical paths in the order they\r\n  // want them tried.\r\n  a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,\r\n  // so they sort equally.\r\n  0;\r\n}\r\n\r\nfunction matchRouteBranch(branch, pathname) {\r\n  let {\r\n    routesMeta\r\n  } = branch;\r\n  let matchedParams = {};\r\n  let matchedPathname = \"/\";\r\n  let matches = [];\r\n\r\n  for (let i = 0; i < routesMeta.length; ++i) {\r\n    let meta = routesMeta[i];\r\n    let end = i === routesMeta.length - 1;\r\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\r\n    let match = matchPath({\r\n      path: meta.relativePath,\r\n      caseSensitive: meta.caseSensitive,\r\n      end\r\n    }, remainingPathname);\r\n    if (!match) return null;\r\n    Object.assign(matchedParams, match.params);\r\n    let route = meta.route;\r\n    matches.push({\r\n      params: matchedParams,\r\n      pathname: joinPaths([matchedPathname, match.pathname]),\r\n      pathnameBase: joinPaths([matchedPathname, match.pathnameBase]),\r\n      route\r\n    });\r\n\r\n    if (match.pathnameBase !== \"/\") {\r\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\r\n    }\r\n  }\r\n\r\n  return matches;\r\n}\r\n/**\r\n * Renders the result of `matchRoutes()` into a React element.\r\n */\r\n\r\n\r\nfunction renderMatches(matches) {\r\n  return _renderMatches(matches);\r\n}\r\n\r\nfunction _renderMatches(matches, parentMatches) {\r\n  if (parentMatches === void 0) {\r\n    parentMatches = [];\r\n  }\r\n\r\n  if (matches == null) return null;\r\n  return matches.reduceRight((outlet, match, index) => {\r\n    return /*#__PURE__*/createElement(RouteContext.Provider, {\r\n      children: match.route.element !== undefined ? match.route.element : /*#__PURE__*/createElement(Outlet, null),\r\n      value: {\r\n        outlet,\r\n        matches: parentMatches.concat(matches.slice(0, index + 1))\r\n      }\r\n    });\r\n  }, null);\r\n}\r\n/**\r\n * A PathPattern is used to match on some portion of a URL pathname.\r\n */\r\n\r\n\r\n/**\r\n * Performs pattern matching on a URL pathname and returns information about\r\n * the match.\r\n *\r\n * @see https://reactrouter.com/docs/en/v6/api#matchpath\r\n */\r\nfunction matchPath(pattern, pathname) {\r\n  if (typeof pattern === \"string\") {\r\n    pattern = {\r\n      path: pattern,\r\n      caseSensitive: false,\r\n      end: true\r\n    };\r\n  }\r\n\r\n  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\r\n  let match = pathname.match(matcher);\r\n  if (!match) return null;\r\n  let matchedPathname = match[0];\r\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\r\n  let captureGroups = match.slice(1);\r\n  let params = paramNames.reduce((memo, paramName, index) => {\r\n    // We need to compute the pathnameBase here using the raw splat value\r\n    // instead of using params[\"*\"] later because it will be decoded then\r\n    if (paramName === \"*\") {\r\n      let splatValue = captureGroups[index] || \"\";\r\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\r\n    }\r\n\r\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\r\n    return memo;\r\n  }, {});\r\n  return {\r\n    params,\r\n    pathname: matchedPathname,\r\n    pathnameBase,\r\n    pattern\r\n  };\r\n}\r\n\r\nfunction compilePath(path, caseSensitive, end) {\r\n  if (caseSensitive === void 0) {\r\n    caseSensitive = false;\r\n  }\r\n\r\n  if (end === void 0) {\r\n    end = true;\r\n  }\r\n\r\n  process.env.NODE_ENV !== \"production\" ? warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\")) : void 0;\r\n  let paramNames = [];\r\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\r\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\r\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\r\n  .replace(/:(\\w+)/g, (_, paramName) => {\r\n    paramNames.push(paramName);\r\n    return \"([^\\\\/]+)\";\r\n  });\r\n\r\n  if (path.endsWith(\"*\")) {\r\n    paramNames.push(\"*\");\r\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\r\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\r\n  } else {\r\n    regexpSource += end ? \"\\\\/*$\" // When matching to the end, ignore trailing slashes\r\n    : // Otherwise, match a word boundary or a proceeding /. The word boundary restricts\r\n    // parent routes to matching only their own words and nothing more, e.g. parent\r\n    // route \"/home\" should not match \"/home2\".\r\n    \"(?:\\\\b|\\\\/|$)\";\r\n  }\r\n\r\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\r\n  return [matcher, paramNames];\r\n}\r\n\r\nfunction safelyDecodeURIComponent(value, paramName) {\r\n  try {\r\n    return decodeURIComponent(value);\r\n  } catch (error) {\r\n    process.env.NODE_ENV !== \"production\" ? warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\")) : void 0;\r\n    return value;\r\n  }\r\n}\r\n/**\r\n * Returns a resolved path object relative to the given pathname.\r\n *\r\n * @see https://reactrouter.com/docs/en/v6/api#resolvepath\r\n */\r\n\r\n\r\nfunction resolvePath(to, fromPathname) {\r\n  if (fromPathname === void 0) {\r\n    fromPathname = \"/\";\r\n  }\r\n\r\n  let {\r\n    pathname: toPathname,\r\n    search = \"\",\r\n    hash = \"\"\r\n  } = typeof to === \"string\" ? parsePath(to) : to;\r\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\r\n  return {\r\n    pathname,\r\n    search: normalizeSearch(search),\r\n    hash: normalizeHash(hash)\r\n  };\r\n}\r\n\r\nfunction resolvePathname(relativePath, fromPathname) {\r\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\r\n  let relativeSegments = relativePath.split(\"/\");\r\n  relativeSegments.forEach(segment => {\r\n    if (segment === \"..\") {\r\n      // Keep the root \"\" segment so the pathname starts at /\r\n      if (segments.length > 1) segments.pop();\r\n    } else if (segment !== \".\") {\r\n      segments.push(segment);\r\n    }\r\n  });\r\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\r\n}\r\n\r\nfunction resolveTo(toArg, routePathnames, locationPathname) {\r\n  let to = typeof toArg === \"string\" ? parsePath(toArg) : toArg;\r\n  let toPathname = toArg === \"\" || to.pathname === \"\" ? \"/\" : to.pathname; // If a pathname is explicitly provided in `to`, it should be relative to the\r\n  // route context. This is explained in `Note on `<Link to>` values` in our\r\n  // migration guide from v5 as a means of disambiguation between `to` values\r\n  // that begin with `/` and those that do not. However, this is problematic for\r\n  // `to` values that do not provide a pathname. `to` can simply be a search or\r\n  // hash string, in which case we should assume that the navigation is relative\r\n  // to the current location's pathname and *not* the route pathname.\r\n\r\n  let from;\r\n\r\n  if (toPathname == null) {\r\n    from = locationPathname;\r\n  } else {\r\n    let routePathnameIndex = routePathnames.length - 1;\r\n\r\n    if (toPathname.startsWith(\"..\")) {\r\n      let toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\r\n      // URL segment\".  This is a key difference from how <a href> works and a\r\n      // major reason we call this a \"to\" value instead of a \"href\".\r\n\r\n      while (toSegments[0] === \"..\") {\r\n        toSegments.shift();\r\n        routePathnameIndex -= 1;\r\n      }\r\n\r\n      to.pathname = toSegments.join(\"/\");\r\n    } // If there are more \"..\" segments than parent routes, resolve relative to\r\n    // the root / URL.\r\n\r\n\r\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\r\n  }\r\n\r\n  let path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original to value had one.\r\n\r\n  if (toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\") && !path.pathname.endsWith(\"/\")) {\r\n    path.pathname += \"/\";\r\n  }\r\n\r\n  return path;\r\n}\r\n\r\nfunction getToPathname(to) {\r\n  // Empty strings should be treated the same as / paths\r\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\r\n}\r\n\r\nfunction stripBasename(pathname, basename) {\r\n  if (basename === \"/\") return pathname;\r\n\r\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\r\n    return null;\r\n  }\r\n\r\n  let nextChar = pathname.charAt(basename.length);\r\n\r\n  if (nextChar && nextChar !== \"/\") {\r\n    // pathname does not start with basename/\r\n    return null;\r\n  }\r\n\r\n  return pathname.slice(basename.length) || \"/\";\r\n}\r\n\r\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\r\n\r\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\r\n\r\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\r\n\r\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash; ///////////////////////////////////////////////////////////////////////////////\r\n\r\nexport { MemoryRouter, Navigate, Outlet, Route, Router, Routes, LocationContext as UNSAFE_LocationContext, NavigationContext as UNSAFE_NavigationContext, RouteContext as UNSAFE_RouteContext, createRoutesFromChildren, generatePath, matchPath, matchRoutes, renderMatches, resolvePath, useHref, useInRouterContext, useLocation, useMatch, useNavigate, useNavigationType, useOutlet, useOutletContext, useParams, useResolvedPath, useRoutes };\r\n\n"]},"metadata":{},"sourceType":"module"}