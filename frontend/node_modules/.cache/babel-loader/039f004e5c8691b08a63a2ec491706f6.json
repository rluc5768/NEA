{"ast":null,"code":"import { useState } from \"react\";\nconst Authentication = {\n  User: function () {\n    //This is where the token will be validated\n    //const [token, setToken] = useToken();\n    let token = \"dsfdsfsdf\"; //=============== Initial Validation ===================\n    //=============== End of intial validation =============\n\n    const checkJWT = async () => {\n      let valid = await validateJWT(token);\n      console.log(\"Valid: \" + valid);\n      return valid;\n    };\n\n    checkJWT(token).then(result => {\n      return false;\n    });\n    return true; //true if valid, false if invalid.\n  }\n};\nexport default Authentication;\n\nasync function validateJWT(token) {\n  return fetch(\"http://localhost:8000/api/v1/authorise_user/\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(token)\n  }).then(data => data.json());\n}","map":{"version":3,"sources":["C:/Users/rober/Documents/Schoolwork/Computer Science/NEA/FinalNEA/frontend/src/Services/Authentication.js"],"names":["useState","Authentication","User","token","checkJWT","valid","validateJWT","console","log","then","result","fetch","method","headers","body","JSON","stringify","data","json"],"mappings":"AAAA,SAAQA,QAAR,QAAuB,OAAvB;AACA,MAAMC,cAAc,GAAG;AACnBC,EAAAA,IAAI,EAAG,YAAW;AAAC;AACf;AACA,QAAIC,KAAK,GAAE,WAAX,CAFc,CAGd;AAEA;;AACA,UAAMC,QAAQ,GAAG,YAAY;AAEzB,UAAIC,KAAK,GAAG,MAAMC,WAAW,CAACH,KAAD,CAA7B;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAUH,KAAtB;AACA,aAAOA,KAAP;AACH,KALD;;AAMAD,IAAAA,QAAQ,CAACD,KAAD,CAAR,CAAgBM,IAAhB,CAAsBC,MAAD,IAAY;AAC7B,aAAO,KAAP;AACH,KAFD;AAKA,WAAO,IAAP,CAjBc,CAiBD;AAChB;AAnBkB,CAAvB;AAqBA,eAAeT,cAAf;;AAEA,eAAeK,WAAf,CAA2BH,KAA3B,EAAiC;AAC7B,SAAOQ,KAAK,CAAC,8CAAD,EAAiD;AAC7DC,IAAAA,MAAM,EAAE,MADqD;AAE7DC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAFoD;AAK7DC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeb,KAAf;AALuD,GAAjD,CAAL,CAMNM,IANM,CAMAQ,IAAD,IAAUA,IAAI,CAACC,IAAL,EANT,CAAP;AAOH","sourcesContent":["import {useState} from \"react\";\r\nconst Authentication = {\r\n    User : function (){//This is where the token will be validated\r\n        //const [token, setToken] = useToken();\r\n        let token= \"dsfdsfsdf\";\r\n        //=============== Initial Validation ===================\r\n\r\n        //=============== End of intial validation =============\r\n        const checkJWT = async () => {\r\n            \r\n            let valid = await validateJWT(token);\r\n            console.log(\"Valid: \"+valid)\r\n            return valid\r\n        }\r\n        checkJWT(token).then((result) => {\r\n            return false;\r\n        });\r\n           \r\n        \r\n        return true; //true if valid, false if invalid.\r\n    }\r\n}\r\nexport default Authentication;\r\n\r\nasync function validateJWT(token){\r\n    return fetch(\"http://localhost:8000/api/v1/authorise_user/\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(token),\r\n  }).then((data) => data.json());\r\n}"]},"metadata":{},"sourceType":"module"}