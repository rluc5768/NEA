{"ast":null,"code":"import { useState } from \"react\";\nconst Authentication = {\n  //User : function (){//This is where the token will be validated\n  //const [token, setToken] = useToken();\n  //let token= \"dsfdsfsdf\";\n  //=============== Initial Validation ===================\n  //=============== End of intial validation =============\n  //return true; //true if valid, false if invalid.\n  User: function (currentToken, setPageState) {\n    /*if (currentToken == null) {\r\n      return setPageState(\"invalid\");\r\n    }*/\n    (async function () {\n      let auth = validateJWT(currentToken);\n      setPageState(auth ? \"valid\" : \"invalid\");\n    })();\n  }\n};\nexport default Authentication;\n\nasync function validateJWT(token) {\n  return await fetch(\"http://localhost:8000/api/v1/authorise_user/\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(token)\n  });\n}","map":{"version":3,"sources":["D:/SchoolWork/Computer Science/Year 2/NEA/NEA/frontend/src/Services/Authentication.js"],"names":["useState","Authentication","User","currentToken","setPageState","auth","validateJWT","token","fetch","method","headers","body","JSON","stringify"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,MAAMC,cAAc,GAAG;AACrB;AACA;AACA;AACA;AAEA;AAEA;AACAC,EAAAA,IAAI,EAAE,UAAUC,YAAV,EAAwBC,YAAxB,EAAsC;AAC1C;AACJ;AACA;AACI,KAAC,kBAAkB;AACjB,UAAIC,IAAI,GAAGC,WAAW,CAACH,YAAD,CAAtB;AACAC,MAAAA,YAAY,CAACC,IAAI,GAAG,OAAH,GAAa,SAAlB,CAAZ;AACD,KAHD;AAID;AAjBoB,CAAvB;AAoBA,eAAeJ,cAAf;;AAEA,eAAeK,WAAf,CAA2BC,KAA3B,EAAkC;AAChC,SAAO,MAAMC,KAAK,CAAC,8CAAD,EAAiD;AACjEC,IAAAA,MAAM,EAAE,MADyD;AAEjEC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAFwD;AAKjEC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,KAAf;AAL2D,GAAjD,CAAlB;AAOD","sourcesContent":["import { useState } from \"react\";\r\nconst Authentication = {\r\n  //User : function (){//This is where the token will be validated\r\n  //const [token, setToken] = useToken();\r\n  //let token= \"dsfdsfsdf\";\r\n  //=============== Initial Validation ===================\r\n\r\n  //=============== End of intial validation =============\r\n\r\n  //return true; //true if valid, false if invalid.\r\n  User: function (currentToken, setPageState) {\r\n    /*if (currentToken == null) {\r\n      return setPageState(\"invalid\");\r\n    }*/\r\n    (async function () {\r\n      let auth = validateJWT(currentToken);\r\n      setPageState(auth ? \"valid\" : \"invalid\");\r\n    })();\r\n  },\r\n};\r\n\r\nexport default Authentication;\r\n\r\nasync function validateJWT(token) {\r\n  return await fetch(\"http://localhost:8000/api/v1/authorise_user/\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(token),\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}