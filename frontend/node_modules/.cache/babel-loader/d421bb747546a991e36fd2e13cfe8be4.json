{"ast":null,"code":"import { useState } from \"react\";\nimport Login from \"../Pages/Login\";\nconst Authentication = {\n  //User : function (){//This is where the token will be validated\n  //const [token, setToken] = useToken();\n  //let token= \"dsfdsfsdf\";\n  //=============== Initial Validation ===================\n  //=============== End of intial validation =============\n  //return true; //true if valid, false if invalid.\n  User: function (currentToken, setUserLoggedIn) {\n    console.log(\"c_token: \" + currentToken);\n\n    if (currentToken == null) {\n      setUserLoggedIn(false);\n      return;\n    } //console.log(\"Bearer \".concat(currentToken))\n\n\n    validateJWT(\"Bearer \".concat(currentToken)).then(data => data.json()).then(res => {\n      console.log(res);\n\n      if (res[\"type\"] == \"authorised\") {\n        //Can trust JWT\n        setUserLoggedIn(true);\n      } else {\n        setUserLoggedIn(false);\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n};\nexport default Authentication;\n\nasync function validateJWT(token) {\n  return fetch(\"http://localhost:8000/api/v1/authorise_user/\", {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": token\n    }\n  });\n}","map":{"version":3,"sources":["C:/Users/rober/Documents/Schoolwork/Computer Science/NEA/FinalNEA/frontend/src/Services/Authentication.js"],"names":["useState","Login","Authentication","User","currentToken","setUserLoggedIn","console","log","validateJWT","concat","then","data","json","res","catch","error","token","fetch","method","headers"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,MAAMC,cAAc,GAAG;AACrB;AACA;AACA;AACA;AAEA;AAEA;AACAC,EAAAA,IAAI,EAAE,UAAUC,YAAV,EAAwBC,eAAxB,EAAyC;AAC7CC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAcH,YAA1B;;AACA,QAAIA,YAAY,IAAI,IAApB,EAA0B;AACxBC,MAAAA,eAAe,CAAC,KAAD,CAAf;AACA;AACD,KAL4C,CAM7C;;;AACAG,IAAAA,WAAW,CAAC,UAAUC,MAAV,CAAiBL,YAAjB,CAAD,CAAX,CACGM,IADH,CACSC,IAAD,IAAUA,IAAI,CAACC,IAAL,EADlB,EAEGF,IAFH,CAESG,GAAD,IAAS;AACbP,MAAAA,OAAO,CAACC,GAAR,CAAYM,GAAZ;;AACA,UAAIA,GAAG,CAAC,MAAD,CAAH,IAAe,YAAnB,EAAgC;AAAC;AAE/BR,QAAAA,eAAe,CAAC,IAAD,CAAf;AACD,OAHD,MAII;AACFA,QAAAA,eAAe,CAAC,KAAD,CAAf;AACD;AACF,KAXH,EAYGS,KAZH,CAYUC,KAAD,IAAW;AAChBT,MAAAA,OAAO,CAACC,GAAR,CAAYQ,KAAZ;AACD,KAdH;AAgBD;AAhCoB,CAAvB;AAmCA,eAAeb,cAAf;;AAEA,eAAeM,WAAf,CAA2BQ,KAA3B,EAAkC;AAChC,SAAOC,KAAK,CAAC,8CAAD,EAAiD;AAC3DC,IAAAA,MAAM,EAAE,KADmD;AAE3DC,IAAAA,OAAO,EAAE;AACP,sBAAgB,kBADT;AAEP,uBAAiBH;AAFV;AAFkD,GAAjD,CAAZ;AAOD","sourcesContent":["import { useState } from \"react\";\r\nimport Login from \"../Pages/Login\";\r\nconst Authentication = {\r\n  //User : function (){//This is where the token will be validated\r\n  //const [token, setToken] = useToken();\r\n  //let token= \"dsfdsfsdf\";\r\n  //=============== Initial Validation ===================\r\n\r\n  //=============== End of intial validation =============\r\n\r\n  //return true; //true if valid, false if invalid.\r\n  User: function (currentToken, setUserLoggedIn) {\r\n    console.log(\"c_token: \" + currentToken);\r\n    if (currentToken == null) {\r\n      setUserLoggedIn(false);\r\n      return;\r\n    }\r\n    //console.log(\"Bearer \".concat(currentToken))\r\n    validateJWT(\"Bearer \".concat(currentToken))\r\n      .then((data) => data.json())\r\n      .then((res) => {\r\n        console.log(res);\r\n        if( res[\"type\"] == \"authorised\"){//Can trust JWT\r\n          \r\n          setUserLoggedIn(true);\r\n        }\r\n        else{\r\n          setUserLoggedIn(false);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      })\r\n    \r\n  },\r\n};\r\n\r\nexport default Authentication;\r\n\r\nasync function validateJWT(token) {\r\n  return fetch(\"http://localhost:8000/api/v1/authorise_user/\", {\r\n    method: \"GET\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      \"Authorization\": token,\r\n    },\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}