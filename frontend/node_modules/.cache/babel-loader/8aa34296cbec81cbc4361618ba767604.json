{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rober\\\\Documents\\\\Schoolwork\\\\Computer Science\\\\NEA\\\\FinalNEA\\\\frontend\\\\src\\\\Pages\\\\VerifyPasswordReset.js\",\n    _s = $RefreshSig$();\n\nimport { useNavigate, useParams, useSearchParams } from \"react-router-dom\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function VerifyPasswordReset(props) {\n  _s();\n\n  const {\n    username\n  } = useParams();\n  const [searchParams] = useSearchParams();\n  const [pageLoaded, setPageLoaded] = useState(\"loading\");\n  const [inputType, setInputType] = useState(\"password\");\n  const validUUID = useRef(\"\");\n  const password1 = useRef();\n  const password2 = useRef();\n  const navigate = useNavigate();\n  let uuid = searchParams.get(\"uuid\");\n\n  if (uuid != null) {\n    //Get uuid from database.\n    fetch(\"http://localhost:8000/api/v1/uuid/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        \"username\": username\n      })\n    }).then(data => data.json()).then(res => {\n      console.log(res);\n      console.dir(username);\n\n      if (res[\"type\"] == \"success\") {\n        //Use UUID here.\n        if (uuid == res[\"uuid\"]) {\n          //The uuid is the same so is valid.\n          validUUID.current = uuid;\n          setPageLoaded(\"valid\");\n        } else {\n          setPageLoaded(\"invalid\");\n        }\n      } else {\n        setPageLoaded(\"invalid\");\n      }\n    });\n  } else {\n    setPageLoaded(\"invalid\");\n  }\n\n  const ToggleInputType = function () {\n    if (inputType == \"password\") {\n      setInputType(\"text\");\n    } else {\n      setInputType(\"password\");\n    }\n  };\n\n  const HandleSubmit = function (e) {\n    e.preventDefault();\n\n    if (password1.current == password2.current) {\n      //Passwords match so exchange UUID for JWT and update database.\n      fetch(\"\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          \"username\": username,\n          \"uuid\": validUUID.current\n        })\n      }).then(data => data.json()).then(res => {\n        if (res[\"type\"] == \"auth_token\") {\n          sessionStorage.setItem(\"token\", JSON.stringify(res[\"token\"]));\n          props.LogUserInOrOut(true);\n          navigate(\"/home\");\n        } else {\n          setPageLoaded(\"invalid\");\n        }\n      });\n    } else {\n      alert(\"Passwords must match.\");\n    }\n  };\n\n  if (pageLoaded == \"loading\") {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"pageLoaded\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: pageLoaded == \"valid\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Confirm password reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"New password:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: inputType,\n          onChange: e => {\n            password1.current = e.target.value;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Re-enter password:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: inputType,\n          onChange: e => {\n            password2.current = e.target.value;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          onClick: e => {\n            HandleSubmit(e);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: ToggleInputType,\n          children: \"View Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"An error has occured, try again.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(VerifyPasswordReset, \"IprkdYjw6eQ0siSkX3MP4O85fxI=\", false, function () {\n  return [useParams, useSearchParams, useNavigate];\n});\n\n_c = VerifyPasswordReset;\n\nvar _c;\n\n$RefreshReg$(_c, \"VerifyPasswordReset\");","map":{"version":3,"sources":["C:/Users/rober/Documents/Schoolwork/Computer Science/NEA/FinalNEA/frontend/src/Pages/VerifyPasswordReset.js"],"names":["useNavigate","useParams","useSearchParams","useEffect","useRef","useState","VerifyPasswordReset","props","username","searchParams","pageLoaded","setPageLoaded","inputType","setInputType","validUUID","password1","password2","navigate","uuid","get","fetch","method","headers","body","JSON","stringify","then","data","json","res","console","log","dir","current","ToggleInputType","HandleSubmit","e","preventDefault","sessionStorage","setItem","LogUserInOrOut","alert","target","value"],"mappings":"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","sourcesContent":["import { useNavigate, useParams, useSearchParams } from \"react-router-dom\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nexport default function VerifyPasswordReset(props){\r\n    const {username} = useParams();\r\n    const [searchParams] = useSearchParams();\r\n    const[pageLoaded, setPageLoaded] = useState(\"loading\");\r\n    const [inputType, setInputType] = useState(\"password\");\r\n    const validUUID = useRef(\"\");\r\n    const password1 = useRef();\r\n    const password2 = useRef();\r\n    const navigate = useNavigate();\r\n    \r\n    \r\n        let uuid = searchParams.get(\"uuid\");\r\n    if(uuid != null){\r\n        //Get uuid from database.\r\n        fetch(\"http://localhost:8000/api/v1/uuid/\",{\r\n            method:\"POST\",\r\n            headers:{\r\n                \"Content-Type\":\"application/json\",\r\n            },\r\n            body: JSON.stringify({\"username\":username})\r\n        }).then((data)=>data.json())\r\n        .then((res)=>{\r\n            console.log(res);\r\n            console.dir(username);\r\n            if(res[\"type\"] == \"success\"){//Use UUID here.\r\n                \r\n                if(uuid == res[\"uuid\"]){//The uuid is the same so is valid.\r\n                    validUUID.current = uuid;\r\n                    setPageLoaded(\"valid\")\r\n                }\r\n                else{\r\n                    setPageLoaded(\"invalid\");\r\n                }\r\n            }\r\n            else{\r\n                setPageLoaded(\"invalid\");\r\n            }\r\n        });\r\n    }\r\n    else{\r\n        setPageLoaded(\"invalid\");\r\n    }\r\n\r\n    \r\n\r\nconst ToggleInputType = function() {\r\n    if(inputType == \"password\"){\r\n        setInputType(\"text\");\r\n    }\r\n    else{\r\n        setInputType(\"password\");\r\n    }\r\n}\r\n    const HandleSubmit = function(e){\r\n        e.preventDefault();\r\n        if(password1.current == password2.current){//Passwords match so exchange UUID for JWT and update database.\r\n            fetch(\"\",{\r\n                method:\"POST\",\r\n                headers:{\r\n                    \"Content-Type\":\"application/json\",\r\n                },\r\n                body:JSON.stringify({\r\n                    \"username\":username, \r\n                    \"uuid\":validUUID.current\r\n                })\r\n            }).then(data => data.json())\r\n            .then((res) => {\r\n                if (res[\"type\"] == \"auth_token\"){\r\n                    sessionStorage.setItem(\"token\", JSON.stringify(res[\"token\"]));\r\n                    props.LogUserInOrOut(true);\r\n                    navigate(\"/home\");\r\n                }\r\n                else{\r\n                    setPageLoaded(\"invalid\")\r\n                }\r\n            });\r\n            \r\n            \r\n        }\r\n        else{\r\n            alert(\"Passwords must match.\")\r\n        }\r\n    }\r\n    if(pageLoaded == \"loading\"){\r\n        return <h1>pageLoaded</h1>;\r\n    }\r\n    return(\r\n    <>\r\n    {pageLoaded == \"valid\"?\r\n    <>\r\n    <h1>Confirm password reset</h1>\r\n    <form>\r\n        <label>New password:</label>\r\n        <input type={inputType} onChange={(e) => {\r\n            password1.current = e.target.value;\r\n        }}/>\r\n        <label>Re-enter password:</label>\r\n        <input type={inputType} onChange={(e) => {\r\n            password2.current = e.target.value;\r\n        }}/>\r\n        <input type=\"submit\" onClick={(e) => {\r\n            HandleSubmit(e);\r\n        }}/>\r\n        <button type=\"button\" onClick={ToggleInputType}>View Password</button>\r\n    </form> \r\n    </>\r\n    : <h1>An error has occured, try again.</h1>\r\n}\r\n    \r\n    </>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}