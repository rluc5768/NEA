{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rober\\\\Documents\\\\Schoolwork\\\\Computer Science\\\\NEA\\\\FinalNEA\\\\frontend\\\\src\\\\Pages\\\\Home.js\",\n    _s = $RefreshSig$();\n\nimport { useLocation, useNavigate, useSearchParams } from \"react-router-dom\";\nimport { Map, ActivityList, LoadAndSort } from \"../Components/ComponentImports\";\nimport \"./Home.css\";\nimport { useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction getToken() {\n  //gets the value of token from session storage.\n  try {\n    return JSON.parse(sessionStorage.getItem(\"token\"));\n  } catch (e) {\n    sessionStorage.removeItem(\"token\");\n  }\n}\n\nfunction Home() {\n  _s();\n\n  //if there is a validation_error then log the user out.\n  const LoadedActivitiesFromDB = useRef(false);\n  const search = useLocation().search;\n  console.log(search);\n  console.log(new URLSearchParams(search).get(\"code\"));\n  let scope = new URLSearchParams(search).get(\"scope\");\n  console.log(\"scope: \" + scope);\n\n  if (scope == \"read,activity:read_all\") {\n    //Will check the previous url to stop 'bad requests' or clear search params.\n    let code = new URLSearchParams(search).get(\"code\");\n    var uri = window.location.toString(); //from https://onlinecode.org/jquery-remove-query-string-parameter-from-url-expertphp/\n\n    var clean_uri = uri.substring(0, uri.indexOf(\"?\"));\n    window.history.replaceState({}, document.title, clean_uri);\n    console.log(code);\n    fetch(\"https://www.strava.com/oauth/token\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        client_id: 53221,\n        client_secret: \"1a3a01f913e69e0868315901ebb13c27aae61dd4\",\n        //would be hidden.\n        code: code,\n        grant_type: \"authorization_code\"\n      })\n    }).then(data => data.json()).then(res => {\n      try {\n        if (\"token_type\" in res) {\n          //given token\n          //Save tokens in database and set stravaAuthorised to true. THen can make requests.\n          //PUT request to \"/user\" to update user profile.\n          fetch(\"http://localhost:8000/api/v1/user/\", {\n            method: \"PUT\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n              \"Authorization\": getToken()\n            },\n            body: JSON.stringify({\n              stravaAuthorised: true,\n              stravaAccessToken: res[\"access_token\"],\n              stravaRefreshToken: res[\"refresh_token\"],\n              stravaAccessTokenExpiresAt: res[\"expires_at\"]\n            })\n          }).then(() => {\n            if (!LoadedActivitiesFromDB) {\n              fetch(\"http://localhost:8000/api/v1/activity/\", {\n                method: \"GET\",\n                headers: {\n                  \"Content-Type\": \"application/json\",\n                  Authorization: getToken()\n                }\n              }).then(data => data.json()).then(res => {\n                console.log(res);\n                LoadedActivitiesFromDB.current = true;\n\n                if (res[\"type\"] == \"success\") {\n                  if (res[\"activities\"].length > 0) {//do something with the activities (add to activity list)\n                  }\n                } else {//handle error.\n                }\n              });\n            }\n          });\n        } else {\n          //handle errors\n          console.log(res);\n        }\n      } catch (e) {}\n    });\n  }\n\n  const HandleClick = function () {\n    //First check if the user is strava_authorised. by calling get on \"/user\"\n    //IF NOT strava authorised, redirected to strava login, url checked and user details modified.\n    fetch(\"http://localhost:8000/api/v1/user\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: getToken()\n      }\n    }).then(data => data.json()).then(res => {\n      if (res[\"type\"] == \"user_details\") {\n        //successful\n        let userDetails = res[\"details\"];\n\n        if (!userDetails[\"stravaAuthorised\"]) {\n          //redirect to strava oauth page.\n          window.location = \"https://www.strava.com/oauth/authorize?client_id=53221&redirect_uri=http://localhost:3000/home&response_type=code&scope=activity:read_all\";\n        } else {//get all activites from database (will happen on page load) and make request to strava.\n        }\n\n        console.log(userDetails);\n      } else {\n        //unsuccessful - handle errors\n        console.log(res);\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid\",\n    id: \"grid-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row show-grid h-75\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col col-md-7\",\n        children: /*#__PURE__*/_jsxDEV(Map, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col col-md-5\",\n        children: /*#__PURE__*/_jsxDEV(ActivityList, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col col-md-5\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary\",\n          onClick: HandleClick,\n          children: \"Load\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Home, \"9zyv1gxkIm3QlI7zcRPidjOt2L0=\", false, function () {\n  return [useLocation];\n});\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["C:/Users/rober/Documents/Schoolwork/Computer Science/NEA/FinalNEA/frontend/src/Pages/Home.js"],"names":["useLocation","useNavigate","useSearchParams","Map","ActivityList","LoadAndSort","useRef","getToken","JSON","parse","sessionStorage","getItem","e","removeItem","Home","LoadedActivitiesFromDB","search","console","log","URLSearchParams","get","scope","code","uri","window","location","toString","clean_uri","substring","indexOf","history","replaceState","document","title","fetch","method","headers","body","stringify","client_id","client_secret","grant_type","then","data","json","res","stravaAuthorised","stravaAccessToken","stravaRefreshToken","stravaAccessTokenExpiresAt","Authorization","current","length","HandleClick","userDetails"],"mappings":"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","sourcesContent":["import { useLocation, useNavigate, useSearchParams } from \"react-router-dom\";\r\nimport { Map, ActivityList, LoadAndSort } from \"../Components/ComponentImports\";\r\nimport \"./Home.css\";\r\nimport {useRef} from \"react\";\r\nfunction getToken() {\r\n  //gets the value of token from session storage.\r\n  try {\r\n    return JSON.parse(sessionStorage.getItem(\"token\"));\r\n  } catch (e) {\r\n    sessionStorage.removeItem(\"token\");\r\n  }\r\n}\r\n\r\nfunction Home() {//if there is a validation_error then log the user out.\r\n  const LoadedActivitiesFromDB = useRef(false);\r\n  const search = useLocation().search;\r\n  console.log(search);\r\n  console.log(new URLSearchParams(search).get(\"code\"));\r\n  \r\n  let scope = new URLSearchParams(search).get(\"scope\");\r\n  console.log(\"scope: \"+scope);\r\n  if (scope == \"read,activity:read_all\") {//Will check the previous url to stop 'bad requests' or clear search params.\r\n    let code = new URLSearchParams(search).get(\"code\");\r\n    var uri = window.location.toString();//from https://onlinecode.org/jquery-remove-query-string-parameter-from-url-expertphp/\r\n    var clean_uri = uri.substring(0, uri.indexOf(\"?\"));\r\n\t    window.history.replaceState({}, document.title, clean_uri);\r\n    \r\n    console.log(code);\r\n    fetch(\"https://www.strava.com/oauth/token\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        client_id: 53221,\r\n        client_secret: \"1a3a01f913e69e0868315901ebb13c27aae61dd4\", //would be hidden.\r\n        code: code,\r\n        grant_type: \"authorization_code\",\r\n      }),\r\n    })\r\n      .then((data) => data.json())\r\n      .then((res) => {\r\n        try {\r\n          \r\n          if (\"token_type\" in res){\r\n            //given token\r\n          //Save tokens in database and set stravaAuthorised to true. THen can make requests.\r\n          //PUT request to \"/user\" to update user profile.\r\n          fetch(\"http://localhost:8000/api/v1/user/\", {\r\n            method: \"PUT\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              \"Authorization\":getToken(),\r\n            },\r\n            body: JSON.stringify({\r\n              stravaAuthorised:true,\r\n              stravaAccessToken:res[\"access_token\"],\r\n              stravaRefreshToken:res[\"refresh_token\"],\r\n              stravaAccessTokenExpiresAt:res[\"expires_at\"]\r\n            }),\r\n          }).then(()=>{\r\n            if(!LoadedActivitiesFromDB){\r\n              fetch(\"http://localhost:8000/api/v1/activity/\", {\r\n                method: \"GET\",\r\n                headers: {\r\n                  \"Content-Type\": \"application/json\",\r\n                  Authorization: getToken(),\r\n                },})\r\n                .then((data)=>data.json())\r\n                .then((res)=>{\r\n                  console.log(res);\r\n                  LoadedActivitiesFromDB.current = true\r\n                  if(res[\"type\"] == \"success\"){\r\n                    if(res[\"activities\"].length > 0){\r\n                      //do something with the activities (add to activity list)\r\n                    }\r\n                \r\n                  }\r\n                  else{\r\n                    //handle error.\r\n                    \r\n                  }\r\n                });\r\n          }\r\n        });\r\n          }\r\n        \r\n          else{//handle errors\r\n            console.log(res)\r\n          }\r\n      \r\n          \r\n          \r\n        }\r\n        catch(e){\r\n\r\n        }\r\n      \r\n    });\r\n  }\r\n  const HandleClick = function () {\r\n    //First check if the user is strava_authorised. by calling get on \"/user\"\r\n    //IF NOT strava authorised, redirected to strava login, url checked and user details modified.\r\n    fetch(\"http://localhost:8000/api/v1/user\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: getToken(),\r\n      },\r\n    })\r\n      .then((data) => data.json())\r\n      .then((res) => {\r\n        if (res[\"type\"] == \"user_details\") {\r\n          //successful\r\n          let userDetails = res[\"details\"];\r\n          if (!userDetails[\"stravaAuthorised\"]) {\r\n            //redirect to strava oauth page.\r\n            window.location =\r\n              \"https://www.strava.com/oauth/authorize?client_id=53221&redirect_uri=http://localhost:3000/home&response_type=code&scope=activity:read_all\";\r\n          }\r\n          else{\r\n            //get all activites from database (will happen on page load) and make request to strava.\r\n            \r\n        }\r\n          console.log(userDetails);\r\n        } else {\r\n          //unsuccessful - handle errors\r\n          console.log(res);\r\n        }\r\n      });\r\n  };\r\n  return (\r\n    <div className=\"container-fluid\" id=\"grid-container\">\r\n      <div className=\"row show-grid h-75\">\r\n        <div className=\"col col-md-7\">\r\n          <Map />\r\n        </div>\r\n        <div className=\"col col-md-5\">\r\n          <ActivityList />\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col-7\"></div>\r\n        <div className=\"col col-md-5\">\r\n          <button className=\"btn btn-primary\" onClick={HandleClick}>\r\n            Load\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}